#![no_std]
use volatile_register::{RO, WO, RW};

#[repr(C)]
/// Flash configuration field
pub struct FTFE_FlashConfig {
  /// [0]: Backdoor Comparison Key 3.
  pub backkey3: RO<u32>,
  /// [1]: Backdoor Comparison Key 2.
  pub backkey2: RO<u32>,
  /// [2]: Backdoor Comparison Key 1.
  pub backkey1: RO<u32>,
  /// [3]: Backdoor Comparison Key 0.
  pub backkey0: RO<u32>,
  /// [4]: Backdoor Comparison Key 7.
  pub backkey7: RO<u32>,
  /// [5]: Backdoor Comparison Key 6.
  pub backkey6: RO<u32>,
  /// [6]: Backdoor Comparison Key 5.
  pub backkey5: RO<u32>,
  /// [7]: Backdoor Comparison Key 4.
  pub backkey4: RO<u32>,
  /// [8]: Non-volatile P-Flash Protection 1 - Low Register
  pub fprot3: RO<u32>,
  /// [9]: Non-volatile P-Flash Protection 1 - High Register
  pub fprot2: RO<u32>,
  /// [10]: Non-volatile P-Flash Protection 0 - Low Register
  pub fprot1: RO<u32>,
  /// [11]: Non-volatile P-Flash Protection 0 - High Register
  pub fprot0: RO<u32>,
  /// [12]: Non-volatile Flash Security Register
  pub fsec: RO<u32>,
  /// [13]: Non-volatile Flash Option Register
  pub fopt: RO<u32>,
  /// [14]: Non-volatile EERAM Protection Register
  pub feprot: RO<u32>,
  /// [15]: Non-volatile D-Flash Protection Register
  pub fdprot: RO<u32>,
}

pub fn ftfe_flashconfig() -> *mut FTFE_FlashConfig {
  1024 as *mut FTFE_FlashConfig
}

#[repr(C)]
/// AIPS-Lite Bridge
pub struct AIPS0 {
  /// [0]: Master Privilege Register A
  pub mpra: RW<u32>,
  reserved0x4: u32,
  reserved0x8: u32,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  /// [32]: Peripheral Access Control Register
  pub pacra: RW<u32>,
  /// [36]: Peripheral Access Control Register
  pub pacrb: RW<u32>,
  /// [40]: Peripheral Access Control Register
  pub pacrc: RW<u32>,
  /// [44]: Peripheral Access Control Register
  pub pacrd: RW<u32>,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  /// [64]: Peripheral Access Control Register
  pub pacre: RW<u32>,
  /// [68]: Peripheral Access Control Register
  pub pacrf: RW<u32>,
  /// [72]: Peripheral Access Control Register
  pub pacrg: RW<u32>,
  /// [76]: Peripheral Access Control Register
  pub pacrh: RW<u32>,
  /// [80]: Peripheral Access Control Register
  pub pacri: RW<u32>,
  /// [84]: Peripheral Access Control Register
  pub pacrj: RW<u32>,
  /// [88]: Peripheral Access Control Register
  pub pacrk: RW<u32>,
  /// [92]: Peripheral Access Control Register
  pub pacrl: RW<u32>,
  /// [96]: Peripheral Access Control Register
  pub pacrm: RW<u32>,
  /// [100]: Peripheral Access Control Register
  pub pacrn: RW<u32>,
  /// [104]: Peripheral Access Control Register
  pub pacro: RW<u32>,
  /// [108]: Peripheral Access Control Register
  pub pacrp: RW<u32>,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  /// [128]: Peripheral Access Control Register
  pub pacru: RW<u32>,
}

pub fn aips0() -> *mut AIPS0 {
  1073741824 as *mut AIPS0
}

#[repr(C)]
/// AIPS-Lite Bridge
pub struct AIPS1 {
  /// [0]: Master Privilege Register A
  pub mpra: RW<u32>,
  reserved0x4: u32,
  reserved0x8: u32,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  /// [32]: Peripheral Access Control Register
  pub pacra: RW<u32>,
  /// [36]: Peripheral Access Control Register
  pub pacrb: RW<u32>,
  /// [40]: Peripheral Access Control Register
  pub pacrc: RW<u32>,
  /// [44]: Peripheral Access Control Register
  pub pacrd: RW<u32>,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  /// [64]: Peripheral Access Control Register
  pub pacre: RW<u32>,
  /// [68]: Peripheral Access Control Register
  pub pacrf: RW<u32>,
  /// [72]: Peripheral Access Control Register
  pub pacrg: RW<u32>,
  /// [76]: Peripheral Access Control Register
  pub pacrh: RW<u32>,
  /// [80]: Peripheral Access Control Register
  pub pacri: RW<u32>,
  /// [84]: Peripheral Access Control Register
  pub pacrj: RW<u32>,
  /// [88]: Peripheral Access Control Register
  pub pacrk: RW<u32>,
  /// [92]: Peripheral Access Control Register
  pub pacrl: RW<u32>,
  /// [96]: Peripheral Access Control Register
  pub pacrm: RW<u32>,
  /// [100]: Peripheral Access Control Register
  pub pacrn: RW<u32>,
  /// [104]: Peripheral Access Control Register
  pub pacro: RW<u32>,
  /// [108]: Peripheral Access Control Register
  pub pacrp: RW<u32>,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  /// [128]: Peripheral Access Control Register
  pub pacru: RW<u32>,
}

pub fn aips1() -> *mut AIPS1 {
  1074266112 as *mut AIPS1
}

#[repr(C)]
/// Crossbar switch
pub struct AXBS {
  /// [0]: Priority Registers Slave
  pub prss: RW<u32>,
  reserved0x4: u32,
  reserved0x8: u32,
  reserved0xc: u32,
  /// [16]: Control Register
  pub crss: RW<u32>,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  reserved0x100: u32,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  reserved0x204: u32,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  reserved0x400: u32,
  reserved0x404: u32,
  reserved0x408: u32,
  reserved0x40c: u32,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  /// [2048]: Master General Purpose Control Register
  pub mgpcrs: RW<u32>,
}

pub fn axbs() -> *mut AXBS {
  1073758208 as *mut AXBS
}

#[repr(C)]
/// Enhanced direct memory access controller
pub struct DMA {
  /// [0]: Control Register
  pub cr: RW<u32>,
  /// [4]: Error Status Register
  pub es: RO<u32>,
  reserved0x8: u32,
  /// [12]: Enable Request Register
  pub erq: RW<u32>,
  reserved0x10: u32,
  /// [20]: Enable Error Interrupt Register
  pub eei: RW<u32>,
  /// [24]: Clear Enable Error Interrupt Register
  pub ceei: WO<u32>,
  /// [25]: Set Enable Error Interrupt Register
  pub seei: WO<u32>,
  /// [26]: Clear Enable Request Register
  pub cerq: WO<u32>,
  /// [27]: Set Enable Request Register
  pub serq: WO<u32>,
  /// [28]: Clear DONE Status Bit Register
  pub cdne: WO<u32>,
  /// [29]: Set START Bit Register
  pub ssrt: WO<u32>,
  /// [30]: Clear Error Register
  pub cerr: WO<u32>,
  /// [31]: Clear Interrupt Request Register
  pub cint: WO<u32>,
  reserved0x20: u32,
  /// [36]: Interrupt Request Register
  pub int: RW<u32>,
  reserved0x28: u32,
  /// [44]: Error Register
  pub err: RW<u32>,
  reserved0x30: u32,
  /// [52]: Hardware Request Status Register
  pub hrs: RO<u32>,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  /// [256]: Channel n Priority Register
  pub dchpris: RW<u32>,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  reserved0x204: u32,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  reserved0x400: u32,
  reserved0x404: u32,
  reserved0x408: u32,
  reserved0x40c: u32,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  reserved0x800: u32,
  reserved0x804: u32,
  reserved0x808: u32,
  reserved0x80c: u32,
  reserved0x810: u32,
  reserved0x814: u32,
  reserved0x818: u32,
  reserved0x81c: u32,
  reserved0x820: u32,
  reserved0x824: u32,
  reserved0x828: u32,
  reserved0x82c: u32,
  reserved0x830: u32,
  reserved0x834: u32,
  reserved0x838: u32,
  reserved0x83c: u32,
  reserved0x840: u32,
  reserved0x844: u32,
  reserved0x848: u32,
  reserved0x84c: u32,
  reserved0x850: u32,
  reserved0x854: u32,
  reserved0x858: u32,
  reserved0x85c: u32,
  reserved0x860: u32,
  reserved0x864: u32,
  reserved0x868: u32,
  reserved0x86c: u32,
  reserved0x870: u32,
  reserved0x874: u32,
  reserved0x878: u32,
  reserved0x87c: u32,
  reserved0x880: u32,
  reserved0x884: u32,
  reserved0x888: u32,
  reserved0x88c: u32,
  reserved0x890: u32,
  reserved0x894: u32,
  reserved0x898: u32,
  reserved0x89c: u32,
  reserved0x8a0: u32,
  reserved0x8a4: u32,
  reserved0x8a8: u32,
  reserved0x8ac: u32,
  reserved0x8b0: u32,
  reserved0x8b4: u32,
  reserved0x8b8: u32,
  reserved0x8bc: u32,
  reserved0x8c0: u32,
  reserved0x8c4: u32,
  reserved0x8c8: u32,
  reserved0x8cc: u32,
  reserved0x8d0: u32,
  reserved0x8d4: u32,
  reserved0x8d8: u32,
  reserved0x8dc: u32,
  reserved0x8e0: u32,
  reserved0x8e4: u32,
  reserved0x8e8: u32,
  reserved0x8ec: u32,
  reserved0x8f0: u32,
  reserved0x8f4: u32,
  reserved0x8f8: u32,
  reserved0x8fc: u32,
  reserved0x900: u32,
  reserved0x904: u32,
  reserved0x908: u32,
  reserved0x90c: u32,
  reserved0x910: u32,
  reserved0x914: u32,
  reserved0x918: u32,
  reserved0x91c: u32,
  reserved0x920: u32,
  reserved0x924: u32,
  reserved0x928: u32,
  reserved0x92c: u32,
  reserved0x930: u32,
  reserved0x934: u32,
  reserved0x938: u32,
  reserved0x93c: u32,
  reserved0x940: u32,
  reserved0x944: u32,
  reserved0x948: u32,
  reserved0x94c: u32,
  reserved0x950: u32,
  reserved0x954: u32,
  reserved0x958: u32,
  reserved0x95c: u32,
  reserved0x960: u32,
  reserved0x964: u32,
  reserved0x968: u32,
  reserved0x96c: u32,
  reserved0x970: u32,
  reserved0x974: u32,
  reserved0x978: u32,
  reserved0x97c: u32,
  reserved0x980: u32,
  reserved0x984: u32,
  reserved0x988: u32,
  reserved0x98c: u32,
  reserved0x990: u32,
  reserved0x994: u32,
  reserved0x998: u32,
  reserved0x99c: u32,
  reserved0x9a0: u32,
  reserved0x9a4: u32,
  reserved0x9a8: u32,
  reserved0x9ac: u32,
  reserved0x9b0: u32,
  reserved0x9b4: u32,
  reserved0x9b8: u32,
  reserved0x9bc: u32,
  reserved0x9c0: u32,
  reserved0x9c4: u32,
  reserved0x9c8: u32,
  reserved0x9cc: u32,
  reserved0x9d0: u32,
  reserved0x9d4: u32,
  reserved0x9d8: u32,
  reserved0x9dc: u32,
  reserved0x9e0: u32,
  reserved0x9e4: u32,
  reserved0x9e8: u32,
  reserved0x9ec: u32,
  reserved0x9f0: u32,
  reserved0x9f4: u32,
  reserved0x9f8: u32,
  reserved0x9fc: u32,
  reserved0xa00: u32,
  reserved0xa04: u32,
  reserved0xa08: u32,
  reserved0xa0c: u32,
  reserved0xa10: u32,
  reserved0xa14: u32,
  reserved0xa18: u32,
  reserved0xa1c: u32,
  reserved0xa20: u32,
  reserved0xa24: u32,
  reserved0xa28: u32,
  reserved0xa2c: u32,
  reserved0xa30: u32,
  reserved0xa34: u32,
  reserved0xa38: u32,
  reserved0xa3c: u32,
  reserved0xa40: u32,
  reserved0xa44: u32,
  reserved0xa48: u32,
  reserved0xa4c: u32,
  reserved0xa50: u32,
  reserved0xa54: u32,
  reserved0xa58: u32,
  reserved0xa5c: u32,
  reserved0xa60: u32,
  reserved0xa64: u32,
  reserved0xa68: u32,
  reserved0xa6c: u32,
  reserved0xa70: u32,
  reserved0xa74: u32,
  reserved0xa78: u32,
  reserved0xa7c: u32,
  reserved0xa80: u32,
  reserved0xa84: u32,
  reserved0xa88: u32,
  reserved0xa8c: u32,
  reserved0xa90: u32,
  reserved0xa94: u32,
  reserved0xa98: u32,
  reserved0xa9c: u32,
  reserved0xaa0: u32,
  reserved0xaa4: u32,
  reserved0xaa8: u32,
  reserved0xaac: u32,
  reserved0xab0: u32,
  reserved0xab4: u32,
  reserved0xab8: u32,
  reserved0xabc: u32,
  reserved0xac0: u32,
  reserved0xac4: u32,
  reserved0xac8: u32,
  reserved0xacc: u32,
  reserved0xad0: u32,
  reserved0xad4: u32,
  reserved0xad8: u32,
  reserved0xadc: u32,
  reserved0xae0: u32,
  reserved0xae4: u32,
  reserved0xae8: u32,
  reserved0xaec: u32,
  reserved0xaf0: u32,
  reserved0xaf4: u32,
  reserved0xaf8: u32,
  reserved0xafc: u32,
  reserved0xb00: u32,
  reserved0xb04: u32,
  reserved0xb08: u32,
  reserved0xb0c: u32,
  reserved0xb10: u32,
  reserved0xb14: u32,
  reserved0xb18: u32,
  reserved0xb1c: u32,
  reserved0xb20: u32,
  reserved0xb24: u32,
  reserved0xb28: u32,
  reserved0xb2c: u32,
  reserved0xb30: u32,
  reserved0xb34: u32,
  reserved0xb38: u32,
  reserved0xb3c: u32,
  reserved0xb40: u32,
  reserved0xb44: u32,
  reserved0xb48: u32,
  reserved0xb4c: u32,
  reserved0xb50: u32,
  reserved0xb54: u32,
  reserved0xb58: u32,
  reserved0xb5c: u32,
  reserved0xb60: u32,
  reserved0xb64: u32,
  reserved0xb68: u32,
  reserved0xb6c: u32,
  reserved0xb70: u32,
  reserved0xb74: u32,
  reserved0xb78: u32,
  reserved0xb7c: u32,
  reserved0xb80: u32,
  reserved0xb84: u32,
  reserved0xb88: u32,
  reserved0xb8c: u32,
  reserved0xb90: u32,
  reserved0xb94: u32,
  reserved0xb98: u32,
  reserved0xb9c: u32,
  reserved0xba0: u32,
  reserved0xba4: u32,
  reserved0xba8: u32,
  reserved0xbac: u32,
  reserved0xbb0: u32,
  reserved0xbb4: u32,
  reserved0xbb8: u32,
  reserved0xbbc: u32,
  reserved0xbc0: u32,
  reserved0xbc4: u32,
  reserved0xbc8: u32,
  reserved0xbcc: u32,
  reserved0xbd0: u32,
  reserved0xbd4: u32,
  reserved0xbd8: u32,
  reserved0xbdc: u32,
  reserved0xbe0: u32,
  reserved0xbe4: u32,
  reserved0xbe8: u32,
  reserved0xbec: u32,
  reserved0xbf0: u32,
  reserved0xbf4: u32,
  reserved0xbf8: u32,
  reserved0xbfc: u32,
  reserved0xc00: u32,
  reserved0xc04: u32,
  reserved0xc08: u32,
  reserved0xc0c: u32,
  reserved0xc10: u32,
  reserved0xc14: u32,
  reserved0xc18: u32,
  reserved0xc1c: u32,
  reserved0xc20: u32,
  reserved0xc24: u32,
  reserved0xc28: u32,
  reserved0xc2c: u32,
  reserved0xc30: u32,
  reserved0xc34: u32,
  reserved0xc38: u32,
  reserved0xc3c: u32,
  reserved0xc40: u32,
  reserved0xc44: u32,
  reserved0xc48: u32,
  reserved0xc4c: u32,
  reserved0xc50: u32,
  reserved0xc54: u32,
  reserved0xc58: u32,
  reserved0xc5c: u32,
  reserved0xc60: u32,
  reserved0xc64: u32,
  reserved0xc68: u32,
  reserved0xc6c: u32,
  reserved0xc70: u32,
  reserved0xc74: u32,
  reserved0xc78: u32,
  reserved0xc7c: u32,
  reserved0xc80: u32,
  reserved0xc84: u32,
  reserved0xc88: u32,
  reserved0xc8c: u32,
  reserved0xc90: u32,
  reserved0xc94: u32,
  reserved0xc98: u32,
  reserved0xc9c: u32,
  reserved0xca0: u32,
  reserved0xca4: u32,
  reserved0xca8: u32,
  reserved0xcac: u32,
  reserved0xcb0: u32,
  reserved0xcb4: u32,
  reserved0xcb8: u32,
  reserved0xcbc: u32,
  reserved0xcc0: u32,
  reserved0xcc4: u32,
  reserved0xcc8: u32,
  reserved0xccc: u32,
  reserved0xcd0: u32,
  reserved0xcd4: u32,
  reserved0xcd8: u32,
  reserved0xcdc: u32,
  reserved0xce0: u32,
  reserved0xce4: u32,
  reserved0xce8: u32,
  reserved0xcec: u32,
  reserved0xcf0: u32,
  reserved0xcf4: u32,
  reserved0xcf8: u32,
  reserved0xcfc: u32,
  reserved0xd00: u32,
  reserved0xd04: u32,
  reserved0xd08: u32,
  reserved0xd0c: u32,
  reserved0xd10: u32,
  reserved0xd14: u32,
  reserved0xd18: u32,
  reserved0xd1c: u32,
  reserved0xd20: u32,
  reserved0xd24: u32,
  reserved0xd28: u32,
  reserved0xd2c: u32,
  reserved0xd30: u32,
  reserved0xd34: u32,
  reserved0xd38: u32,
  reserved0xd3c: u32,
  reserved0xd40: u32,
  reserved0xd44: u32,
  reserved0xd48: u32,
  reserved0xd4c: u32,
  reserved0xd50: u32,
  reserved0xd54: u32,
  reserved0xd58: u32,
  reserved0xd5c: u32,
  reserved0xd60: u32,
  reserved0xd64: u32,
  reserved0xd68: u32,
  reserved0xd6c: u32,
  reserved0xd70: u32,
  reserved0xd74: u32,
  reserved0xd78: u32,
  reserved0xd7c: u32,
  reserved0xd80: u32,
  reserved0xd84: u32,
  reserved0xd88: u32,
  reserved0xd8c: u32,
  reserved0xd90: u32,
  reserved0xd94: u32,
  reserved0xd98: u32,
  reserved0xd9c: u32,
  reserved0xda0: u32,
  reserved0xda4: u32,
  reserved0xda8: u32,
  reserved0xdac: u32,
  reserved0xdb0: u32,
  reserved0xdb4: u32,
  reserved0xdb8: u32,
  reserved0xdbc: u32,
  reserved0xdc0: u32,
  reserved0xdc4: u32,
  reserved0xdc8: u32,
  reserved0xdcc: u32,
  reserved0xdd0: u32,
  reserved0xdd4: u32,
  reserved0xdd8: u32,
  reserved0xddc: u32,
  reserved0xde0: u32,
  reserved0xde4: u32,
  reserved0xde8: u32,
  reserved0xdec: u32,
  reserved0xdf0: u32,
  reserved0xdf4: u32,
  reserved0xdf8: u32,
  reserved0xdfc: u32,
  reserved0xe00: u32,
  reserved0xe04: u32,
  reserved0xe08: u32,
  reserved0xe0c: u32,
  reserved0xe10: u32,
  reserved0xe14: u32,
  reserved0xe18: u32,
  reserved0xe1c: u32,
  reserved0xe20: u32,
  reserved0xe24: u32,
  reserved0xe28: u32,
  reserved0xe2c: u32,
  reserved0xe30: u32,
  reserved0xe34: u32,
  reserved0xe38: u32,
  reserved0xe3c: u32,
  reserved0xe40: u32,
  reserved0xe44: u32,
  reserved0xe48: u32,
  reserved0xe4c: u32,
  reserved0xe50: u32,
  reserved0xe54: u32,
  reserved0xe58: u32,
  reserved0xe5c: u32,
  reserved0xe60: u32,
  reserved0xe64: u32,
  reserved0xe68: u32,
  reserved0xe6c: u32,
  reserved0xe70: u32,
  reserved0xe74: u32,
  reserved0xe78: u32,
  reserved0xe7c: u32,
  reserved0xe80: u32,
  reserved0xe84: u32,
  reserved0xe88: u32,
  reserved0xe8c: u32,
  reserved0xe90: u32,
  reserved0xe94: u32,
  reserved0xe98: u32,
  reserved0xe9c: u32,
  reserved0xea0: u32,
  reserved0xea4: u32,
  reserved0xea8: u32,
  reserved0xeac: u32,
  reserved0xeb0: u32,
  reserved0xeb4: u32,
  reserved0xeb8: u32,
  reserved0xebc: u32,
  reserved0xec0: u32,
  reserved0xec4: u32,
  reserved0xec8: u32,
  reserved0xecc: u32,
  reserved0xed0: u32,
  reserved0xed4: u32,
  reserved0xed8: u32,
  reserved0xedc: u32,
  reserved0xee0: u32,
  reserved0xee4: u32,
  reserved0xee8: u32,
  reserved0xeec: u32,
  reserved0xef0: u32,
  reserved0xef4: u32,
  reserved0xef8: u32,
  reserved0xefc: u32,
  reserved0xf00: u32,
  reserved0xf04: u32,
  reserved0xf08: u32,
  reserved0xf0c: u32,
  reserved0xf10: u32,
  reserved0xf14: u32,
  reserved0xf18: u32,
  reserved0xf1c: u32,
  reserved0xf20: u32,
  reserved0xf24: u32,
  reserved0xf28: u32,
  reserved0xf2c: u32,
  reserved0xf30: u32,
  reserved0xf34: u32,
  reserved0xf38: u32,
  reserved0xf3c: u32,
  reserved0xf40: u32,
  reserved0xf44: u32,
  reserved0xf48: u32,
  reserved0xf4c: u32,
  reserved0xf50: u32,
  reserved0xf54: u32,
  reserved0xf58: u32,
  reserved0xf5c: u32,
  reserved0xf60: u32,
  reserved0xf64: u32,
  reserved0xf68: u32,
  reserved0xf6c: u32,
  reserved0xf70: u32,
  reserved0xf74: u32,
  reserved0xf78: u32,
  reserved0xf7c: u32,
  reserved0xf80: u32,
  reserved0xf84: u32,
  reserved0xf88: u32,
  reserved0xf8c: u32,
  reserved0xf90: u32,
  reserved0xf94: u32,
  reserved0xf98: u32,
  reserved0xf9c: u32,
  reserved0xfa0: u32,
  reserved0xfa4: u32,
  reserved0xfa8: u32,
  reserved0xfac: u32,
  reserved0xfb0: u32,
  reserved0xfb4: u32,
  reserved0xfb8: u32,
  reserved0xfbc: u32,
  reserved0xfc0: u32,
  reserved0xfc4: u32,
  reserved0xfc8: u32,
  reserved0xfcc: u32,
  reserved0xfd0: u32,
  reserved0xfd4: u32,
  reserved0xfd8: u32,
  reserved0xfdc: u32,
  reserved0xfe0: u32,
  reserved0xfe4: u32,
  reserved0xfe8: u32,
  reserved0xfec: u32,
  reserved0xff0: u32,
  reserved0xff4: u32,
  reserved0xff8: u32,
  reserved0xffc: u32,
  /// [4096]: TCD Source Address
  pub tcds_saddr: RW<u32>,
  /// [4100]: TCD Signed Source Address Offset
  pub tcds_soff: RW<u32>,
  /// [4102]: TCD Transfer Attributes
  pub tcds_attr: RW<u32>,
  /// [4104]: TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled)
  pub tcds_nbytes_mloffyes: RW<u32>,
  /// [4108]: TCD Last Source Address Adjustment
  pub tcds_slast: RW<u32>,
  /// [4112]: TCD Destination Address
  pub tcds_daddr: RW<u32>,
  /// [4116]: TCD Signed Destination Address Offset
  pub tcds_doff: RW<u32>,
  /// [4118]: TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
  pub tcds_citer_elinkyes: RW<u32>,
  /// [4120]: TCD Last Destination Address Adjustment/Scatter Gather Address
  pub tcds_dlastsga: RW<u32>,
  /// [4124]: TCD Control and Status
  pub tcds_csr: RW<u32>,
  /// [4126]: TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
  pub tcds_biter_elinkyes: RW<u32>,
}

pub fn dma() -> *mut DMA {
  1073774592 as *mut DMA
}

#[repr(C)]
/// FlexBus external bus interface
pub struct FB {
  /// [0]: Chip Select Address Register
  pub csars: RW<u32>,
  /// [4]: Chip Select Mask Register
  pub csmrs: RW<u32>,
  /// [8]: Chip Select Control Register
  pub cscrs: RW<u32>,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  /// [96]: Chip Select port Multiplexing Control Register
  pub cspmcr: RW<u32>,
}

pub fn fb() -> *mut FB {
  1073790976 as *mut FB
}

#[repr(C)]
/// Memory protection unit
pub struct MPU {
  /// [0]: Control/Error Status Register
  pub cesr: RW<u32>,
  reserved0x4: u32,
  reserved0x8: u32,
  reserved0xc: u32,
  /// [16]: Error Address Register, slave port n
  pub ears: RO<u32>,
  /// [20]: Error Detail Register, slave port n
  pub edrs: RO<u32>,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  reserved0x100: u32,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  reserved0x204: u32,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  /// [1024]: Region Descriptor n, Word 0
  pub rgds_word0: RW<u32>,
  /// [1028]: Region Descriptor n, Word 1
  pub rgds_word1: RW<u32>,
  /// [1032]: Region Descriptor n, Word 2
  pub rgds_word2: RW<u32>,
  /// [1036]: Region Descriptor n, Word 3
  pub rgds_word3: RW<u32>,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  /// [2048]: Region Descriptor Alternate Access Control n
  pub rgdaacs: RW<u32>,
}

pub fn mpu() -> *mut MPU {
  1073795072 as *mut MPU
}

#[repr(C)]
/// Flash Memory Controller
pub struct FMC {
  /// [0]: Flash Access Protection Register
  pub pfapr: RW<u32>,
  /// [4]: Flash Bank 0 Control Register
  pub pfb0cr: RW<u32>,
  /// [8]: Flash Bank 1 Control Register
  pub pfb1cr: RW<u32>,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  /// [256]: Cache Tag Storage
  pub tagvdw0ss: RW<u32>,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  /// [272]: Cache Tag Storage
  pub tagvdw1ss: RW<u32>,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  /// [288]: Cache Tag Storage
  pub tagvdw2ss: RW<u32>,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  /// [304]: Cache Tag Storage
  pub tagvdw3ss: RW<u32>,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  /// [512]: Cache Data Storage (upper word)
  pub dataw0ssu: RW<u32>,
  /// [516]: Cache Data Storage (lower word)
  pub dataw0ssl: RW<u32>,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  /// [544]: Cache Data Storage (upper word)
  pub dataw1ssu: RW<u32>,
  /// [548]: Cache Data Storage (lower word)
  pub dataw1ssl: RW<u32>,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  /// [576]: Cache Data Storage (upper word)
  pub dataw2ssu: RW<u32>,
  /// [580]: Cache Data Storage (lower word)
  pub dataw2ssl: RW<u32>,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  /// [608]: Cache Data Storage (upper word)
  pub dataw3ssu: RW<u32>,
  /// [612]: Cache Data Storage (lower word)
  pub dataw3ssl: RW<u32>,
}

pub fn fmc() -> *mut FMC {
  1073868800 as *mut FMC
}

#[repr(C)]
/// Flash Memory Interface
pub struct FTFE {
  /// [0]: Flash Status Register
  pub fstat: RW<u32>,
  /// [1]: Flash Configuration Register
  pub fcnfg: RW<u32>,
  /// [2]: Flash Security Register
  pub fsec: RO<u32>,
  /// [3]: Flash Option Register
  pub fopt: RO<u32>,
  /// [4]: Flash Common Command Object Registers
  pub fccobs: RW<u32>,
  reserved0x8: u32,
  reserved0xc: u32,
  /// [16]: Program Flash Protection Registers
  pub fprots: RW<u32>,
  reserved0x14: u32,
  /// [22]: EEPROM Protection Register
  pub feprot: RW<u32>,
  /// [23]: Data Flash Protection Register
  pub fdprot: RW<u32>,
}

pub fn ftfe() -> *mut FTFE {
  1073872896 as *mut FTFE
}

#[repr(C)]
/// DMA channel multiplexor
pub struct DMAMUX {
  /// [0]: Channel Configuration register
  pub chcfgs: RW<u32>,
}

pub fn dmamux() -> *mut DMAMUX {
  1073876992 as *mut DMAMUX
}

#[repr(C)]
/// Flex Controller Area Network module
pub struct CAN0 {
  /// [0]: Module Configuration Register
  pub mcr: RW<u32>,
  /// [4]: Control 1 register
  pub ctrl1: RW<u32>,
  /// [8]: Free Running Timer
  pub timer: RW<u32>,
  reserved0xc: u32,
  /// [16]: Rx Mailboxes Global Mask Register
  pub rxmgmask: RW<u32>,
  /// [20]: Rx 14 Mask register
  pub rx14mask: RW<u32>,
  /// [24]: Rx 15 Mask register
  pub rx15mask: RW<u32>,
  /// [28]: Error Counter
  pub ecr: RW<u32>,
  /// [32]: Error and Status 1 register
  pub esr1: RW<u32>,
  reserved0x24: u32,
  /// [40]: Interrupt Masks 1 register
  pub imask1: RW<u32>,
  reserved0x2c: u32,
  /// [48]: Interrupt Flags 1 register
  pub iflag1: RW<u32>,
  /// [52]: Control 2 register
  pub ctrl2: RW<u32>,
  /// [56]: Error and Status 2 register
  pub esr2: RO<u32>,
  reserved0x3c: u32,
  reserved0x40: u32,
  /// [68]: CRC Register
  pub crcr: RO<u32>,
  /// [72]: Rx FIFO Global Mask register
  pub rxfgmask: RW<u32>,
  /// [76]: Rx FIFO Information Register
  pub rxfir: RO<u32>,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  /// [128]: Message Buffer 0 CS Register
  pub cs0: RW<u32>,
  /// [132]: Message Buffer 0 ID Register
  pub id0: RW<u32>,
  /// [136]: Message Buffer 0 WORD0 Register
  pub word00: RW<u32>,
  /// [140]: Message Buffer 0 WORD1 Register
  pub word10: RW<u32>,
  /// [144]: Message Buffer 1 CS Register
  pub cs1: RW<u32>,
  /// [148]: Message Buffer 1 ID Register
  pub id1: RW<u32>,
  /// [152]: Message Buffer 1 WORD0 Register
  pub word01: RW<u32>,
  /// [156]: Message Buffer 1 WORD1 Register
  pub word11: RW<u32>,
  /// [160]: Message Buffer 2 CS Register
  pub cs2: RW<u32>,
  /// [164]: Message Buffer 2 ID Register
  pub id2: RW<u32>,
  /// [168]: Message Buffer 2 WORD0 Register
  pub word02: RW<u32>,
  /// [172]: Message Buffer 2 WORD1 Register
  pub word12: RW<u32>,
  /// [176]: Message Buffer 3 CS Register
  pub cs3: RW<u32>,
  /// [180]: Message Buffer 3 ID Register
  pub id3: RW<u32>,
  /// [184]: Message Buffer 3 WORD0 Register
  pub word03: RW<u32>,
  /// [188]: Message Buffer 3 WORD1 Register
  pub word13: RW<u32>,
  /// [192]: Message Buffer 4 CS Register
  pub cs4: RW<u32>,
  /// [196]: Message Buffer 4 ID Register
  pub id4: RW<u32>,
  /// [200]: Message Buffer 4 WORD0 Register
  pub word04: RW<u32>,
  /// [204]: Message Buffer 4 WORD1 Register
  pub word14: RW<u32>,
  /// [208]: Message Buffer 5 CS Register
  pub cs5: RW<u32>,
  /// [212]: Message Buffer 5 ID Register
  pub id5: RW<u32>,
  /// [216]: Message Buffer 5 WORD0 Register
  pub word05: RW<u32>,
  /// [220]: Message Buffer 5 WORD1 Register
  pub word15: RW<u32>,
  /// [224]: Message Buffer 6 CS Register
  pub cs6: RW<u32>,
  /// [228]: Message Buffer 6 ID Register
  pub id6: RW<u32>,
  /// [232]: Message Buffer 6 WORD0 Register
  pub word06: RW<u32>,
  /// [236]: Message Buffer 6 WORD1 Register
  pub word16: RW<u32>,
  /// [240]: Message Buffer 7 CS Register
  pub cs7: RW<u32>,
  /// [244]: Message Buffer 7 ID Register
  pub id7: RW<u32>,
  /// [248]: Message Buffer 7 WORD0 Register
  pub word07: RW<u32>,
  /// [252]: Message Buffer 7 WORD1 Register
  pub word17: RW<u32>,
  /// [256]: Message Buffer 8 CS Register
  pub cs8: RW<u32>,
  /// [260]: Message Buffer 8 ID Register
  pub id8: RW<u32>,
  /// [264]: Message Buffer 8 WORD0 Register
  pub word08: RW<u32>,
  /// [268]: Message Buffer 8 WORD1 Register
  pub word18: RW<u32>,
  /// [272]: Message Buffer 9 CS Register
  pub cs9: RW<u32>,
  /// [276]: Message Buffer 9 ID Register
  pub id9: RW<u32>,
  /// [280]: Message Buffer 9 WORD0 Register
  pub word09: RW<u32>,
  /// [284]: Message Buffer 9 WORD1 Register
  pub word19: RW<u32>,
  /// [288]: Message Buffer 10 CS Register
  pub cs10: RW<u32>,
  /// [292]: Message Buffer 10 ID Register
  pub id10: RW<u32>,
  /// [296]: Message Buffer 10 WORD0 Register
  pub word010: RW<u32>,
  /// [300]: Message Buffer 10 WORD1 Register
  pub word110: RW<u32>,
  /// [304]: Message Buffer 11 CS Register
  pub cs11: RW<u32>,
  /// [308]: Message Buffer 11 ID Register
  pub id11: RW<u32>,
  /// [312]: Message Buffer 11 WORD0 Register
  pub word011: RW<u32>,
  /// [316]: Message Buffer 11 WORD1 Register
  pub word111: RW<u32>,
  /// [320]: Message Buffer 12 CS Register
  pub cs12: RW<u32>,
  /// [324]: Message Buffer 12 ID Register
  pub id12: RW<u32>,
  /// [328]: Message Buffer 12 WORD0 Register
  pub word012: RW<u32>,
  /// [332]: Message Buffer 12 WORD1 Register
  pub word112: RW<u32>,
  /// [336]: Message Buffer 13 CS Register
  pub cs13: RW<u32>,
  /// [340]: Message Buffer 13 ID Register
  pub id13: RW<u32>,
  /// [344]: Message Buffer 13 WORD0 Register
  pub word013: RW<u32>,
  /// [348]: Message Buffer 13 WORD1 Register
  pub word113: RW<u32>,
  /// [352]: Message Buffer 14 CS Register
  pub cs14: RW<u32>,
  /// [356]: Message Buffer 14 ID Register
  pub id14: RW<u32>,
  /// [360]: Message Buffer 14 WORD0 Register
  pub word014: RW<u32>,
  /// [364]: Message Buffer 14 WORD1 Register
  pub word114: RW<u32>,
  /// [368]: Message Buffer 15 CS Register
  pub cs15: RW<u32>,
  /// [372]: Message Buffer 15 ID Register
  pub id15: RW<u32>,
  /// [376]: Message Buffer 15 WORD0 Register
  pub word015: RW<u32>,
  /// [380]: Message Buffer 15 WORD1 Register
  pub word115: RW<u32>,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  reserved0x204: u32,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  reserved0x400: u32,
  reserved0x404: u32,
  reserved0x408: u32,
  reserved0x40c: u32,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  reserved0x800: u32,
  reserved0x804: u32,
  reserved0x808: u32,
  reserved0x80c: u32,
  reserved0x810: u32,
  reserved0x814: u32,
  reserved0x818: u32,
  reserved0x81c: u32,
  reserved0x820: u32,
  reserved0x824: u32,
  reserved0x828: u32,
  reserved0x82c: u32,
  reserved0x830: u32,
  reserved0x834: u32,
  reserved0x838: u32,
  reserved0x83c: u32,
  reserved0x840: u32,
  reserved0x844: u32,
  reserved0x848: u32,
  reserved0x84c: u32,
  reserved0x850: u32,
  reserved0x854: u32,
  reserved0x858: u32,
  reserved0x85c: u32,
  reserved0x860: u32,
  reserved0x864: u32,
  reserved0x868: u32,
  reserved0x86c: u32,
  reserved0x870: u32,
  reserved0x874: u32,
  reserved0x878: u32,
  reserved0x87c: u32,
  /// [2176]: Rx Individual Mask Registers
  pub rximrs: RW<u32>,
}

pub fn can0() -> *mut CAN0 {
  1073889280 as *mut CAN0
}

#[repr(C)]
/// Random Number Generator Accelerator
pub struct RNG {
  /// [0]: RNGA Control Register
  pub cr: RW<u32>,
  /// [4]: RNGA Status Register
  pub sr: RO<u32>,
  /// [8]: RNGA Entropy Register
  pub er: WO<u32>,
  /// [12]: RNGA Output Register
  pub or: RO<u32>,
}

pub fn rng() -> *mut RNG {
  1073909760 as *mut RNG
}

#[repr(C)]
/// Serial Peripheral Interface
pub struct SPI0 {
  /// [0]: Module Configuration Register
  pub mcr: RW<u32>,
  reserved0x4: u32,
  /// [8]: Transfer Count Register
  pub tcr: RW<u32>,
  /// [12]: Clock and Transfer Attributes Register (In Slave Mode)
  pub ctar_slave: RW<u32>,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  /// [44]: Status Register
  pub sr: RW<u32>,
  /// [48]: DMA/Interrupt Request Select and Enable Register
  pub rser: RW<u32>,
  /// [52]: PUSH TX FIFO Register In Slave Mode
  pub pushr_slave: RW<u32>,
  /// [56]: POP RX FIFO Register
  pub popr: RO<u32>,
  /// [60]: Transmit FIFO Registers
  pub txfrs: RO<u32>,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  /// [124]: Receive FIFO Registers
  pub rxfrs: RO<u32>,
}

pub fn spi0() -> *mut SPI0 {
  1073922048 as *mut SPI0
}

#[repr(C)]
/// Serial Peripheral Interface
pub struct SPI1 {
  /// [0]: Module Configuration Register
  pub mcr: RW<u32>,
  reserved0x4: u32,
  /// [8]: Transfer Count Register
  pub tcr: RW<u32>,
  /// [12]: Clock and Transfer Attributes Register (In Slave Mode)
  pub ctar_slave: RW<u32>,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  /// [44]: Status Register
  pub sr: RW<u32>,
  /// [48]: DMA/Interrupt Request Select and Enable Register
  pub rser: RW<u32>,
  /// [52]: PUSH TX FIFO Register In Slave Mode
  pub pushr_slave: RW<u32>,
  /// [56]: POP RX FIFO Register
  pub popr: RO<u32>,
  /// [60]: Transmit FIFO Registers
  pub txfrs: RO<u32>,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  /// [124]: Receive FIFO Registers
  pub rxfrs: RO<u32>,
}

pub fn spi1() -> *mut SPI1 {
  1073926144 as *mut SPI1
}

#[repr(C)]
/// Serial Peripheral Interface
pub struct SPI2 {
  /// [0]: Module Configuration Register
  pub mcr: RW<u32>,
  reserved0x4: u32,
  /// [8]: Transfer Count Register
  pub tcr: RW<u32>,
  /// [12]: Clock and Transfer Attributes Register (In Slave Mode)
  pub ctar_slave: RW<u32>,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  /// [44]: Status Register
  pub sr: RW<u32>,
  /// [48]: DMA/Interrupt Request Select and Enable Register
  pub rser: RW<u32>,
  /// [52]: PUSH TX FIFO Register In Slave Mode
  pub pushr_slave: RW<u32>,
  /// [56]: POP RX FIFO Register
  pub popr: RO<u32>,
  /// [60]: Transmit FIFO Registers
  pub txfrs: RO<u32>,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  /// [124]: Receive FIFO Registers
  pub rxfrs: RO<u32>,
}

pub fn spi2() -> *mut SPI2 {
  1074446336 as *mut SPI2
}

#[repr(C)]
/// Inter-IC Sound / Synchronous Audio Interface
pub struct I2S0 {
  /// [0]: SAI Transmit Control Register
  pub tcsr: RW<u32>,
  /// [4]: SAI Transmit Configuration 1 Register
  pub tcr1: RW<u32>,
  /// [8]: SAI Transmit Configuration 2 Register
  pub tcr2: RW<u32>,
  /// [12]: SAI Transmit Configuration 3 Register
  pub tcr3: RW<u32>,
  /// [16]: SAI Transmit Configuration 4 Register
  pub tcr4: RW<u32>,
  /// [20]: SAI Transmit Configuration 5 Register
  pub tcr5: RW<u32>,
  reserved0x18: u32,
  reserved0x1c: u32,
  /// [32]: SAI Transmit Data Register
  pub tdrs: WO<u32>,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  /// [64]: SAI Transmit FIFO Register
  pub tfrs: RO<u32>,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  /// [96]: SAI Transmit Mask Register
  pub tmr: RW<u32>,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  /// [128]: SAI Receive Control Register
  pub rcsr: RW<u32>,
  /// [132]: SAI Receive Configuration 1 Register
  pub rcr1: RW<u32>,
  /// [136]: SAI Receive Configuration 2 Register
  pub rcr2: RW<u32>,
  /// [140]: SAI Receive Configuration 3 Register
  pub rcr3: RW<u32>,
  /// [144]: SAI Receive Configuration 4 Register
  pub rcr4: RW<u32>,
  /// [148]: SAI Receive Configuration 5 Register
  pub rcr5: RW<u32>,
  reserved0x98: u32,
  reserved0x9c: u32,
  /// [160]: SAI Receive Data Register
  pub rdrs: RO<u32>,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  /// [192]: SAI Receive FIFO Register
  pub rfrs: RO<u32>,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  /// [224]: SAI Receive Mask Register
  pub rmr: RW<u32>,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  /// [256]: SAI MCLK Control Register
  pub mcr: RW<u32>,
  /// [260]: SAI MCLK Divide Register
  pub mdr: RW<u32>,
}

pub fn i2s0() -> *mut I2S0 {
  1073934336 as *mut I2S0
}

#[repr(C)]
/// Cyclic Redundancy Check
pub struct CRC {
  /// [0]: CRC_DATALL register.
  pub datall: RW<u32>,
  /// [1]: CRC_DATALU register.
  pub datalu: RW<u32>,
  /// [2]: CRC_DATAHL register.
  pub datahl: RW<u32>,
  /// [3]: CRC_DATAHU register.
  pub datahu: RW<u32>,
  /// [4]: CRC_GPOLYLL register.
  pub gpolyll: RW<u32>,
  /// [5]: CRC_GPOLYLU register.
  pub gpolylu: RW<u32>,
  /// [6]: CRC_GPOLYHL register.
  pub gpolyhl: RW<u32>,
  /// [7]: CRC_GPOLYHU register.
  pub gpolyhu: RW<u32>,
  /// [8]: CRC Control register
  pub ctrl: RW<u32>,
  /// [11]: CRC_CTRLHU register.
  pub ctrlhu: RW<u32>,
}

pub fn crc() -> *mut CRC {
  1073946624 as *mut CRC
}

#[repr(C)]
/// USB Device Charger Detection module
pub struct USBDCD {
  /// [0]: Control register
  pub control: RW<u32>,
  /// [4]: Clock register
  pub clock: RW<u32>,
  /// [8]: Status register
  pub status: RO<u32>,
  reserved0xc: u32,
  /// [16]: TIMER0 register
  pub timer0: RW<u32>,
  /// [20]: TIMER1 register
  pub timer1: RW<u32>,
  /// [24]: TIMER2_BC12 register
  pub timer2_bc12: RW<u32>,
}

pub fn usbdcd() -> *mut USBDCD {
  1073958912 as *mut USBDCD
}

#[repr(C)]
/// Programmable Delay Block
pub struct PDB0 {
  /// [0]: Status and Control register
  pub sc: RW<u32>,
  /// [4]: Modulus register
  pub r#mod: RW<u32>,
  /// [8]: Counter register
  pub cnt: RO<u32>,
  /// [12]: Interrupt Delay register
  pub idly: RW<u32>,
  /// [16]: Channel n Control register 1
  pub chsc1: RW<u32>,
  /// [20]: Channel n Status register
  pub chss: RW<u32>,
  /// [24]: Channel n Delay 0 register
  pub chsdly0: RW<u32>,
  /// [28]: Channel n Delay 1 register
  pub chsdly1: RW<u32>,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  reserved0x100: u32,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  /// [336]: DAC Interval Trigger n Control register
  pub dacintcs: RW<u32>,
  /// [340]: DAC Interval n register
  pub dacints: RW<u32>,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  /// [400]: Pulse-Out n Enable register
  pub poen: RW<u32>,
  /// [404]: Pulse-Out n Delay register
  pub posdly: RW<u32>,
}

pub fn pdb0() -> *mut PDB0 {
  1073963008 as *mut PDB0
}

#[repr(C)]
/// Periodic Interrupt Timer
pub struct PIT {
  /// [0]: PIT Module Control Register
  pub mcr: RW<u32>,
  reserved0x4: u32,
  reserved0x8: u32,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  /// [256]: Timer Load Value Register
  pub ldvals: RW<u32>,
  /// [260]: Current Timer Value Register
  pub cvals: RO<u32>,
  /// [264]: Timer Control Register
  pub tctrls: RW<u32>,
  /// [268]: Timer Flag Register
  pub tflgs: RW<u32>,
}

pub fn pit() -> *mut PIT {
  1073967104 as *mut PIT
}

#[repr(C)]
/// FlexTimer Module
pub struct FTM0 {
  /// [0]: Status And Control
  pub sc: RW<u32>,
  /// [4]: Counter
  pub cnt: RW<u32>,
  /// [8]: Modulo
  pub r#mod: RW<u32>,
  /// [12]: Channel (n) Status And Control
  pub cssc: RW<u32>,
  /// [16]: Channel (n) Value
  pub csv: RW<u32>,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  /// [76]: Counter Initial Value
  pub cntin: RW<u32>,
  /// [80]: Capture And Compare Status
  pub status: RW<u32>,
  /// [84]: Features Mode Selection
  pub mode: RW<u32>,
  /// [88]: Synchronization
  pub sync: RW<u32>,
  /// [92]: Initial State For Channels Output
  pub outinit: RW<u32>,
  /// [96]: Output Mask
  pub outmask: RW<u32>,
  /// [100]: Function For Linked Channels
  pub combine: RW<u32>,
  /// [104]: Deadtime Insertion Control
  pub deadtime: RW<u32>,
  /// [108]: FTM External Trigger
  pub exttrig: RW<u32>,
  /// [112]: Channels Polarity
  pub pol: RW<u32>,
  /// [116]: Fault Mode Status
  pub fms: RW<u32>,
  /// [120]: Input Capture Filter Control
  pub filter: RW<u32>,
  /// [124]: Fault Control
  pub fltctrl: RW<u32>,
  /// [128]: Quadrature Decoder Control And Status
  pub qdctrl: RW<u32>,
  /// [132]: Configuration
  pub conf: RW<u32>,
  /// [136]: FTM Fault Input Polarity
  pub fltpol: RW<u32>,
  /// [140]: Synchronization Configuration
  pub synconf: RW<u32>,
  /// [144]: FTM Inverting Control
  pub invctrl: RW<u32>,
  /// [148]: FTM Software Output Control
  pub swoctrl: RW<u32>,
  /// [152]: FTM PWM Load
  pub pwmload: RW<u32>,
}

pub fn ftm0() -> *mut FTM0 {
  1073971200 as *mut FTM0
}

#[repr(C)]
/// FlexTimer Module
pub struct FTM1 {
  /// [0]: Status And Control
  pub sc: RW<u32>,
  /// [4]: Counter
  pub cnt: RW<u32>,
  /// [8]: Modulo
  pub r#mod: RW<u32>,
  /// [12]: Channel (n) Status And Control
  pub cssc: RW<u32>,
  /// [16]: Channel (n) Value
  pub csv: RW<u32>,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  /// [76]: Counter Initial Value
  pub cntin: RW<u32>,
  /// [80]: Capture And Compare Status
  pub status: RW<u32>,
  /// [84]: Features Mode Selection
  pub mode: RW<u32>,
  /// [88]: Synchronization
  pub sync: RW<u32>,
  /// [92]: Initial State For Channels Output
  pub outinit: RW<u32>,
  /// [96]: Output Mask
  pub outmask: RW<u32>,
  /// [100]: Function For Linked Channels
  pub combine: RW<u32>,
  /// [104]: Deadtime Insertion Control
  pub deadtime: RW<u32>,
  /// [108]: FTM External Trigger
  pub exttrig: RW<u32>,
  /// [112]: Channels Polarity
  pub pol: RW<u32>,
  /// [116]: Fault Mode Status
  pub fms: RW<u32>,
  /// [120]: Input Capture Filter Control
  pub filter: RW<u32>,
  /// [124]: Fault Control
  pub fltctrl: RW<u32>,
  /// [128]: Quadrature Decoder Control And Status
  pub qdctrl: RW<u32>,
  /// [132]: Configuration
  pub conf: RW<u32>,
  /// [136]: FTM Fault Input Polarity
  pub fltpol: RW<u32>,
  /// [140]: Synchronization Configuration
  pub synconf: RW<u32>,
  /// [144]: FTM Inverting Control
  pub invctrl: RW<u32>,
  /// [148]: FTM Software Output Control
  pub swoctrl: RW<u32>,
  /// [152]: FTM PWM Load
  pub pwmload: RW<u32>,
}

pub fn ftm1() -> *mut FTM1 {
  1073975296 as *mut FTM1
}

#[repr(C)]
/// FlexTimer Module
pub struct FTM2 {
  /// [0]: Status And Control
  pub sc: RW<u32>,
  /// [4]: Counter
  pub cnt: RW<u32>,
  /// [8]: Modulo
  pub r#mod: RW<u32>,
  /// [12]: Channel (n) Status And Control
  pub cssc: RW<u32>,
  /// [16]: Channel (n) Value
  pub csv: RW<u32>,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  /// [76]: Counter Initial Value
  pub cntin: RW<u32>,
  /// [80]: Capture And Compare Status
  pub status: RW<u32>,
  /// [84]: Features Mode Selection
  pub mode: RW<u32>,
  /// [88]: Synchronization
  pub sync: RW<u32>,
  /// [92]: Initial State For Channels Output
  pub outinit: RW<u32>,
  /// [96]: Output Mask
  pub outmask: RW<u32>,
  /// [100]: Function For Linked Channels
  pub combine: RW<u32>,
  /// [104]: Deadtime Insertion Control
  pub deadtime: RW<u32>,
  /// [108]: FTM External Trigger
  pub exttrig: RW<u32>,
  /// [112]: Channels Polarity
  pub pol: RW<u32>,
  /// [116]: Fault Mode Status
  pub fms: RW<u32>,
  /// [120]: Input Capture Filter Control
  pub filter: RW<u32>,
  /// [124]: Fault Control
  pub fltctrl: RW<u32>,
  /// [128]: Quadrature Decoder Control And Status
  pub qdctrl: RW<u32>,
  /// [132]: Configuration
  pub conf: RW<u32>,
  /// [136]: FTM Fault Input Polarity
  pub fltpol: RW<u32>,
  /// [140]: Synchronization Configuration
  pub synconf: RW<u32>,
  /// [144]: FTM Inverting Control
  pub invctrl: RW<u32>,
  /// [148]: FTM Software Output Control
  pub swoctrl: RW<u32>,
  /// [152]: FTM PWM Load
  pub pwmload: RW<u32>,
}

pub fn ftm2() -> *mut FTM2 {
  1073979392 as *mut FTM2
}

#[repr(C)]
/// FlexTimer Module
pub struct FTM3 {
  /// [0]: Status And Control
  pub sc: RW<u32>,
  /// [4]: Counter
  pub cnt: RW<u32>,
  /// [8]: Modulo
  pub r#mod: RW<u32>,
  /// [12]: Channel (n) Status And Control
  pub cssc: RW<u32>,
  /// [16]: Channel (n) Value
  pub csv: RW<u32>,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  /// [76]: Counter Initial Value
  pub cntin: RW<u32>,
  /// [80]: Capture And Compare Status
  pub status: RW<u32>,
  /// [84]: Features Mode Selection
  pub mode: RW<u32>,
  /// [88]: Synchronization
  pub sync: RW<u32>,
  /// [92]: Initial State For Channels Output
  pub outinit: RW<u32>,
  /// [96]: Output Mask
  pub outmask: RW<u32>,
  /// [100]: Function For Linked Channels
  pub combine: RW<u32>,
  /// [104]: Deadtime Insertion Control
  pub deadtime: RW<u32>,
  /// [108]: FTM External Trigger
  pub exttrig: RW<u32>,
  /// [112]: Channels Polarity
  pub pol: RW<u32>,
  /// [116]: Fault Mode Status
  pub fms: RW<u32>,
  /// [120]: Input Capture Filter Control
  pub filter: RW<u32>,
  /// [124]: Fault Control
  pub fltctrl: RW<u32>,
  /// [128]: Quadrature Decoder Control And Status
  pub qdctrl: RW<u32>,
  /// [132]: Configuration
  pub conf: RW<u32>,
  /// [136]: FTM Fault Input Polarity
  pub fltpol: RW<u32>,
  /// [140]: Synchronization Configuration
  pub synconf: RW<u32>,
  /// [144]: FTM Inverting Control
  pub invctrl: RW<u32>,
  /// [148]: FTM Software Output Control
  pub swoctrl: RW<u32>,
  /// [152]: FTM PWM Load
  pub pwmload: RW<u32>,
}

pub fn ftm3() -> *mut FTM3 {
  1074499584 as *mut FTM3
}

#[repr(C)]
/// Analog-to-Digital Converter
pub struct ADC0 {
  /// [0]: ADC Status and Control Registers 1
  pub sc1s: RW<u32>,
  reserved0x4: u32,
  /// [8]: ADC Configuration Register 1
  pub cfg1: RW<u32>,
  /// [12]: ADC Configuration Register 2
  pub cfg2: RW<u32>,
  /// [16]: ADC Data Result Register
  pub rs: RO<u32>,
  reserved0x14: u32,
  /// [24]: Compare Value Registers
  pub cvs: RW<u32>,
  reserved0x1c: u32,
  /// [32]: Status and Control Register 2
  pub sc2: RW<u32>,
  /// [36]: Status and Control Register 3
  pub sc3: RW<u32>,
  /// [40]: ADC Offset Correction Register
  pub ofs: RW<u32>,
  /// [44]: ADC Plus-Side Gain Register
  pub pg: RW<u32>,
  /// [48]: ADC Minus-Side Gain Register
  pub mg: RW<u32>,
  /// [52]: ADC Plus-Side General Calibration Value Register
  pub clpd: RW<u32>,
  /// [56]: ADC Plus-Side General Calibration Value Register
  pub clps: RW<u32>,
  /// [60]: ADC Plus-Side General Calibration Value Register
  pub clp4: RW<u32>,
  /// [64]: ADC Plus-Side General Calibration Value Register
  pub clp3: RW<u32>,
  /// [68]: ADC Plus-Side General Calibration Value Register
  pub clp2: RW<u32>,
  /// [72]: ADC Plus-Side General Calibration Value Register
  pub clp1: RW<u32>,
  /// [76]: ADC Plus-Side General Calibration Value Register
  pub clp0: RW<u32>,
  reserved0x50: u32,
  /// [84]: ADC Minus-Side General Calibration Value Register
  pub clmd: RW<u32>,
  /// [88]: ADC Minus-Side General Calibration Value Register
  pub clms: RW<u32>,
  /// [92]: ADC Minus-Side General Calibration Value Register
  pub clm4: RW<u32>,
  /// [96]: ADC Minus-Side General Calibration Value Register
  pub clm3: RW<u32>,
  /// [100]: ADC Minus-Side General Calibration Value Register
  pub clm2: RW<u32>,
  /// [104]: ADC Minus-Side General Calibration Value Register
  pub clm1: RW<u32>,
  /// [108]: ADC Minus-Side General Calibration Value Register
  pub clm0: RW<u32>,
}

pub fn adc0() -> *mut ADC0 {
  1073983488 as *mut ADC0
}

#[repr(C)]
/// Analog-to-Digital Converter
pub struct ADC1 {
  /// [0]: ADC Status and Control Registers 1
  pub sc1s: RW<u32>,
  reserved0x4: u32,
  /// [8]: ADC Configuration Register 1
  pub cfg1: RW<u32>,
  /// [12]: ADC Configuration Register 2
  pub cfg2: RW<u32>,
  /// [16]: ADC Data Result Register
  pub rs: RO<u32>,
  reserved0x14: u32,
  /// [24]: Compare Value Registers
  pub cvs: RW<u32>,
  reserved0x1c: u32,
  /// [32]: Status and Control Register 2
  pub sc2: RW<u32>,
  /// [36]: Status and Control Register 3
  pub sc3: RW<u32>,
  /// [40]: ADC Offset Correction Register
  pub ofs: RW<u32>,
  /// [44]: ADC Plus-Side Gain Register
  pub pg: RW<u32>,
  /// [48]: ADC Minus-Side Gain Register
  pub mg: RW<u32>,
  /// [52]: ADC Plus-Side General Calibration Value Register
  pub clpd: RW<u32>,
  /// [56]: ADC Plus-Side General Calibration Value Register
  pub clps: RW<u32>,
  /// [60]: ADC Plus-Side General Calibration Value Register
  pub clp4: RW<u32>,
  /// [64]: ADC Plus-Side General Calibration Value Register
  pub clp3: RW<u32>,
  /// [68]: ADC Plus-Side General Calibration Value Register
  pub clp2: RW<u32>,
  /// [72]: ADC Plus-Side General Calibration Value Register
  pub clp1: RW<u32>,
  /// [76]: ADC Plus-Side General Calibration Value Register
  pub clp0: RW<u32>,
  reserved0x50: u32,
  /// [84]: ADC Minus-Side General Calibration Value Register
  pub clmd: RW<u32>,
  /// [88]: ADC Minus-Side General Calibration Value Register
  pub clms: RW<u32>,
  /// [92]: ADC Minus-Side General Calibration Value Register
  pub clm4: RW<u32>,
  /// [96]: ADC Minus-Side General Calibration Value Register
  pub clm3: RW<u32>,
  /// [100]: ADC Minus-Side General Calibration Value Register
  pub clm2: RW<u32>,
  /// [104]: ADC Minus-Side General Calibration Value Register
  pub clm1: RW<u32>,
  /// [108]: ADC Minus-Side General Calibration Value Register
  pub clm0: RW<u32>,
}

pub fn adc1() -> *mut ADC1 {
  1074507776 as *mut ADC1
}

#[repr(C)]
/// Secure Real Time Clock
pub struct RTC {
  /// [0]: RTC Time Seconds Register
  pub tsr: RW<u32>,
  /// [4]: RTC Time Prescaler Register
  pub tpr: RW<u32>,
  /// [8]: RTC Time Alarm Register
  pub tar: RW<u32>,
  /// [12]: RTC Time Compensation Register
  pub tcr: RW<u32>,
  /// [16]: RTC Control Register
  pub cr: RW<u32>,
  /// [20]: RTC Status Register
  pub sr: RW<u32>,
  /// [24]: RTC Lock Register
  pub lr: RW<u32>,
  /// [28]: RTC Interrupt Enable Register
  pub ier: RW<u32>,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  reserved0x100: u32,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  reserved0x204: u32,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  reserved0x400: u32,
  reserved0x404: u32,
  reserved0x408: u32,
  reserved0x40c: u32,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  /// [2048]: RTC Write Access Register
  pub war: RW<u32>,
  /// [2052]: RTC Read Access Register
  pub rar: RW<u32>,
}

pub fn rtc() -> *mut RTC {
  1073991680 as *mut RTC
}

#[repr(C)]
/// VBAT register file
pub struct RFVBAT {
  /// [0]: VBAT register file register
  pub regs: RW<u32>,
}

pub fn rfvbat() -> *mut RFVBAT {
  1073995776 as *mut RFVBAT
}

#[repr(C)]
/// Low Power Timer
pub struct LPTMR0 {
  /// [0]: Low Power Timer Control Status Register
  pub csr: RW<u32>,
  /// [4]: Low Power Timer Prescale Register
  pub psr: RW<u32>,
  /// [8]: Low Power Timer Compare Register
  pub cmr: RW<u32>,
  /// [12]: Low Power Timer Counter Register
  pub cnr: RW<u32>,
}

pub fn lptmr0() -> *mut LPTMR0 {
  1074003968 as *mut LPTMR0
}

#[repr(C)]
/// System register file
pub struct RFSYS {
  /// [0]: Register file register
  pub regs: RW<u32>,
}

pub fn rfsys() -> *mut RFSYS {
  1074008064 as *mut RFSYS
}

#[repr(C)]
/// System Integration Module
pub struct SIM {
  /// [0]: System Options Register 1
  pub sopt1: RW<u32>,
  /// [4]: SOPT1 Configuration Register
  pub sopt1cfg: RW<u32>,
  reserved0x8: u32,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  reserved0x100: u32,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  reserved0x204: u32,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  reserved0x400: u32,
  reserved0x404: u32,
  reserved0x408: u32,
  reserved0x40c: u32,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  reserved0x800: u32,
  reserved0x804: u32,
  reserved0x808: u32,
  reserved0x80c: u32,
  reserved0x810: u32,
  reserved0x814: u32,
  reserved0x818: u32,
  reserved0x81c: u32,
  reserved0x820: u32,
  reserved0x824: u32,
  reserved0x828: u32,
  reserved0x82c: u32,
  reserved0x830: u32,
  reserved0x834: u32,
  reserved0x838: u32,
  reserved0x83c: u32,
  reserved0x840: u32,
  reserved0x844: u32,
  reserved0x848: u32,
  reserved0x84c: u32,
  reserved0x850: u32,
  reserved0x854: u32,
  reserved0x858: u32,
  reserved0x85c: u32,
  reserved0x860: u32,
  reserved0x864: u32,
  reserved0x868: u32,
  reserved0x86c: u32,
  reserved0x870: u32,
  reserved0x874: u32,
  reserved0x878: u32,
  reserved0x87c: u32,
  reserved0x880: u32,
  reserved0x884: u32,
  reserved0x888: u32,
  reserved0x88c: u32,
  reserved0x890: u32,
  reserved0x894: u32,
  reserved0x898: u32,
  reserved0x89c: u32,
  reserved0x8a0: u32,
  reserved0x8a4: u32,
  reserved0x8a8: u32,
  reserved0x8ac: u32,
  reserved0x8b0: u32,
  reserved0x8b4: u32,
  reserved0x8b8: u32,
  reserved0x8bc: u32,
  reserved0x8c0: u32,
  reserved0x8c4: u32,
  reserved0x8c8: u32,
  reserved0x8cc: u32,
  reserved0x8d0: u32,
  reserved0x8d4: u32,
  reserved0x8d8: u32,
  reserved0x8dc: u32,
  reserved0x8e0: u32,
  reserved0x8e4: u32,
  reserved0x8e8: u32,
  reserved0x8ec: u32,
  reserved0x8f0: u32,
  reserved0x8f4: u32,
  reserved0x8f8: u32,
  reserved0x8fc: u32,
  reserved0x900: u32,
  reserved0x904: u32,
  reserved0x908: u32,
  reserved0x90c: u32,
  reserved0x910: u32,
  reserved0x914: u32,
  reserved0x918: u32,
  reserved0x91c: u32,
  reserved0x920: u32,
  reserved0x924: u32,
  reserved0x928: u32,
  reserved0x92c: u32,
  reserved0x930: u32,
  reserved0x934: u32,
  reserved0x938: u32,
  reserved0x93c: u32,
  reserved0x940: u32,
  reserved0x944: u32,
  reserved0x948: u32,
  reserved0x94c: u32,
  reserved0x950: u32,
  reserved0x954: u32,
  reserved0x958: u32,
  reserved0x95c: u32,
  reserved0x960: u32,
  reserved0x964: u32,
  reserved0x968: u32,
  reserved0x96c: u32,
  reserved0x970: u32,
  reserved0x974: u32,
  reserved0x978: u32,
  reserved0x97c: u32,
  reserved0x980: u32,
  reserved0x984: u32,
  reserved0x988: u32,
  reserved0x98c: u32,
  reserved0x990: u32,
  reserved0x994: u32,
  reserved0x998: u32,
  reserved0x99c: u32,
  reserved0x9a0: u32,
  reserved0x9a4: u32,
  reserved0x9a8: u32,
  reserved0x9ac: u32,
  reserved0x9b0: u32,
  reserved0x9b4: u32,
  reserved0x9b8: u32,
  reserved0x9bc: u32,
  reserved0x9c0: u32,
  reserved0x9c4: u32,
  reserved0x9c8: u32,
  reserved0x9cc: u32,
  reserved0x9d0: u32,
  reserved0x9d4: u32,
  reserved0x9d8: u32,
  reserved0x9dc: u32,
  reserved0x9e0: u32,
  reserved0x9e4: u32,
  reserved0x9e8: u32,
  reserved0x9ec: u32,
  reserved0x9f0: u32,
  reserved0x9f4: u32,
  reserved0x9f8: u32,
  reserved0x9fc: u32,
  reserved0xa00: u32,
  reserved0xa04: u32,
  reserved0xa08: u32,
  reserved0xa0c: u32,
  reserved0xa10: u32,
  reserved0xa14: u32,
  reserved0xa18: u32,
  reserved0xa1c: u32,
  reserved0xa20: u32,
  reserved0xa24: u32,
  reserved0xa28: u32,
  reserved0xa2c: u32,
  reserved0xa30: u32,
  reserved0xa34: u32,
  reserved0xa38: u32,
  reserved0xa3c: u32,
  reserved0xa40: u32,
  reserved0xa44: u32,
  reserved0xa48: u32,
  reserved0xa4c: u32,
  reserved0xa50: u32,
  reserved0xa54: u32,
  reserved0xa58: u32,
  reserved0xa5c: u32,
  reserved0xa60: u32,
  reserved0xa64: u32,
  reserved0xa68: u32,
  reserved0xa6c: u32,
  reserved0xa70: u32,
  reserved0xa74: u32,
  reserved0xa78: u32,
  reserved0xa7c: u32,
  reserved0xa80: u32,
  reserved0xa84: u32,
  reserved0xa88: u32,
  reserved0xa8c: u32,
  reserved0xa90: u32,
  reserved0xa94: u32,
  reserved0xa98: u32,
  reserved0xa9c: u32,
  reserved0xaa0: u32,
  reserved0xaa4: u32,
  reserved0xaa8: u32,
  reserved0xaac: u32,
  reserved0xab0: u32,
  reserved0xab4: u32,
  reserved0xab8: u32,
  reserved0xabc: u32,
  reserved0xac0: u32,
  reserved0xac4: u32,
  reserved0xac8: u32,
  reserved0xacc: u32,
  reserved0xad0: u32,
  reserved0xad4: u32,
  reserved0xad8: u32,
  reserved0xadc: u32,
  reserved0xae0: u32,
  reserved0xae4: u32,
  reserved0xae8: u32,
  reserved0xaec: u32,
  reserved0xaf0: u32,
  reserved0xaf4: u32,
  reserved0xaf8: u32,
  reserved0xafc: u32,
  reserved0xb00: u32,
  reserved0xb04: u32,
  reserved0xb08: u32,
  reserved0xb0c: u32,
  reserved0xb10: u32,
  reserved0xb14: u32,
  reserved0xb18: u32,
  reserved0xb1c: u32,
  reserved0xb20: u32,
  reserved0xb24: u32,
  reserved0xb28: u32,
  reserved0xb2c: u32,
  reserved0xb30: u32,
  reserved0xb34: u32,
  reserved0xb38: u32,
  reserved0xb3c: u32,
  reserved0xb40: u32,
  reserved0xb44: u32,
  reserved0xb48: u32,
  reserved0xb4c: u32,
  reserved0xb50: u32,
  reserved0xb54: u32,
  reserved0xb58: u32,
  reserved0xb5c: u32,
  reserved0xb60: u32,
  reserved0xb64: u32,
  reserved0xb68: u32,
  reserved0xb6c: u32,
  reserved0xb70: u32,
  reserved0xb74: u32,
  reserved0xb78: u32,
  reserved0xb7c: u32,
  reserved0xb80: u32,
  reserved0xb84: u32,
  reserved0xb88: u32,
  reserved0xb8c: u32,
  reserved0xb90: u32,
  reserved0xb94: u32,
  reserved0xb98: u32,
  reserved0xb9c: u32,
  reserved0xba0: u32,
  reserved0xba4: u32,
  reserved0xba8: u32,
  reserved0xbac: u32,
  reserved0xbb0: u32,
  reserved0xbb4: u32,
  reserved0xbb8: u32,
  reserved0xbbc: u32,
  reserved0xbc0: u32,
  reserved0xbc4: u32,
  reserved0xbc8: u32,
  reserved0xbcc: u32,
  reserved0xbd0: u32,
  reserved0xbd4: u32,
  reserved0xbd8: u32,
  reserved0xbdc: u32,
  reserved0xbe0: u32,
  reserved0xbe4: u32,
  reserved0xbe8: u32,
  reserved0xbec: u32,
  reserved0xbf0: u32,
  reserved0xbf4: u32,
  reserved0xbf8: u32,
  reserved0xbfc: u32,
  reserved0xc00: u32,
  reserved0xc04: u32,
  reserved0xc08: u32,
  reserved0xc0c: u32,
  reserved0xc10: u32,
  reserved0xc14: u32,
  reserved0xc18: u32,
  reserved0xc1c: u32,
  reserved0xc20: u32,
  reserved0xc24: u32,
  reserved0xc28: u32,
  reserved0xc2c: u32,
  reserved0xc30: u32,
  reserved0xc34: u32,
  reserved0xc38: u32,
  reserved0xc3c: u32,
  reserved0xc40: u32,
  reserved0xc44: u32,
  reserved0xc48: u32,
  reserved0xc4c: u32,
  reserved0xc50: u32,
  reserved0xc54: u32,
  reserved0xc58: u32,
  reserved0xc5c: u32,
  reserved0xc60: u32,
  reserved0xc64: u32,
  reserved0xc68: u32,
  reserved0xc6c: u32,
  reserved0xc70: u32,
  reserved0xc74: u32,
  reserved0xc78: u32,
  reserved0xc7c: u32,
  reserved0xc80: u32,
  reserved0xc84: u32,
  reserved0xc88: u32,
  reserved0xc8c: u32,
  reserved0xc90: u32,
  reserved0xc94: u32,
  reserved0xc98: u32,
  reserved0xc9c: u32,
  reserved0xca0: u32,
  reserved0xca4: u32,
  reserved0xca8: u32,
  reserved0xcac: u32,
  reserved0xcb0: u32,
  reserved0xcb4: u32,
  reserved0xcb8: u32,
  reserved0xcbc: u32,
  reserved0xcc0: u32,
  reserved0xcc4: u32,
  reserved0xcc8: u32,
  reserved0xccc: u32,
  reserved0xcd0: u32,
  reserved0xcd4: u32,
  reserved0xcd8: u32,
  reserved0xcdc: u32,
  reserved0xce0: u32,
  reserved0xce4: u32,
  reserved0xce8: u32,
  reserved0xcec: u32,
  reserved0xcf0: u32,
  reserved0xcf4: u32,
  reserved0xcf8: u32,
  reserved0xcfc: u32,
  reserved0xd00: u32,
  reserved0xd04: u32,
  reserved0xd08: u32,
  reserved0xd0c: u32,
  reserved0xd10: u32,
  reserved0xd14: u32,
  reserved0xd18: u32,
  reserved0xd1c: u32,
  reserved0xd20: u32,
  reserved0xd24: u32,
  reserved0xd28: u32,
  reserved0xd2c: u32,
  reserved0xd30: u32,
  reserved0xd34: u32,
  reserved0xd38: u32,
  reserved0xd3c: u32,
  reserved0xd40: u32,
  reserved0xd44: u32,
  reserved0xd48: u32,
  reserved0xd4c: u32,
  reserved0xd50: u32,
  reserved0xd54: u32,
  reserved0xd58: u32,
  reserved0xd5c: u32,
  reserved0xd60: u32,
  reserved0xd64: u32,
  reserved0xd68: u32,
  reserved0xd6c: u32,
  reserved0xd70: u32,
  reserved0xd74: u32,
  reserved0xd78: u32,
  reserved0xd7c: u32,
  reserved0xd80: u32,
  reserved0xd84: u32,
  reserved0xd88: u32,
  reserved0xd8c: u32,
  reserved0xd90: u32,
  reserved0xd94: u32,
  reserved0xd98: u32,
  reserved0xd9c: u32,
  reserved0xda0: u32,
  reserved0xda4: u32,
  reserved0xda8: u32,
  reserved0xdac: u32,
  reserved0xdb0: u32,
  reserved0xdb4: u32,
  reserved0xdb8: u32,
  reserved0xdbc: u32,
  reserved0xdc0: u32,
  reserved0xdc4: u32,
  reserved0xdc8: u32,
  reserved0xdcc: u32,
  reserved0xdd0: u32,
  reserved0xdd4: u32,
  reserved0xdd8: u32,
  reserved0xddc: u32,
  reserved0xde0: u32,
  reserved0xde4: u32,
  reserved0xde8: u32,
  reserved0xdec: u32,
  reserved0xdf0: u32,
  reserved0xdf4: u32,
  reserved0xdf8: u32,
  reserved0xdfc: u32,
  reserved0xe00: u32,
  reserved0xe04: u32,
  reserved0xe08: u32,
  reserved0xe0c: u32,
  reserved0xe10: u32,
  reserved0xe14: u32,
  reserved0xe18: u32,
  reserved0xe1c: u32,
  reserved0xe20: u32,
  reserved0xe24: u32,
  reserved0xe28: u32,
  reserved0xe2c: u32,
  reserved0xe30: u32,
  reserved0xe34: u32,
  reserved0xe38: u32,
  reserved0xe3c: u32,
  reserved0xe40: u32,
  reserved0xe44: u32,
  reserved0xe48: u32,
  reserved0xe4c: u32,
  reserved0xe50: u32,
  reserved0xe54: u32,
  reserved0xe58: u32,
  reserved0xe5c: u32,
  reserved0xe60: u32,
  reserved0xe64: u32,
  reserved0xe68: u32,
  reserved0xe6c: u32,
  reserved0xe70: u32,
  reserved0xe74: u32,
  reserved0xe78: u32,
  reserved0xe7c: u32,
  reserved0xe80: u32,
  reserved0xe84: u32,
  reserved0xe88: u32,
  reserved0xe8c: u32,
  reserved0xe90: u32,
  reserved0xe94: u32,
  reserved0xe98: u32,
  reserved0xe9c: u32,
  reserved0xea0: u32,
  reserved0xea4: u32,
  reserved0xea8: u32,
  reserved0xeac: u32,
  reserved0xeb0: u32,
  reserved0xeb4: u32,
  reserved0xeb8: u32,
  reserved0xebc: u32,
  reserved0xec0: u32,
  reserved0xec4: u32,
  reserved0xec8: u32,
  reserved0xecc: u32,
  reserved0xed0: u32,
  reserved0xed4: u32,
  reserved0xed8: u32,
  reserved0xedc: u32,
  reserved0xee0: u32,
  reserved0xee4: u32,
  reserved0xee8: u32,
  reserved0xeec: u32,
  reserved0xef0: u32,
  reserved0xef4: u32,
  reserved0xef8: u32,
  reserved0xefc: u32,
  reserved0xf00: u32,
  reserved0xf04: u32,
  reserved0xf08: u32,
  reserved0xf0c: u32,
  reserved0xf10: u32,
  reserved0xf14: u32,
  reserved0xf18: u32,
  reserved0xf1c: u32,
  reserved0xf20: u32,
  reserved0xf24: u32,
  reserved0xf28: u32,
  reserved0xf2c: u32,
  reserved0xf30: u32,
  reserved0xf34: u32,
  reserved0xf38: u32,
  reserved0xf3c: u32,
  reserved0xf40: u32,
  reserved0xf44: u32,
  reserved0xf48: u32,
  reserved0xf4c: u32,
  reserved0xf50: u32,
  reserved0xf54: u32,
  reserved0xf58: u32,
  reserved0xf5c: u32,
  reserved0xf60: u32,
  reserved0xf64: u32,
  reserved0xf68: u32,
  reserved0xf6c: u32,
  reserved0xf70: u32,
  reserved0xf74: u32,
  reserved0xf78: u32,
  reserved0xf7c: u32,
  reserved0xf80: u32,
  reserved0xf84: u32,
  reserved0xf88: u32,
  reserved0xf8c: u32,
  reserved0xf90: u32,
  reserved0xf94: u32,
  reserved0xf98: u32,
  reserved0xf9c: u32,
  reserved0xfa0: u32,
  reserved0xfa4: u32,
  reserved0xfa8: u32,
  reserved0xfac: u32,
  reserved0xfb0: u32,
  reserved0xfb4: u32,
  reserved0xfb8: u32,
  reserved0xfbc: u32,
  reserved0xfc0: u32,
  reserved0xfc4: u32,
  reserved0xfc8: u32,
  reserved0xfcc: u32,
  reserved0xfd0: u32,
  reserved0xfd4: u32,
  reserved0xfd8: u32,
  reserved0xfdc: u32,
  reserved0xfe0: u32,
  reserved0xfe4: u32,
  reserved0xfe8: u32,
  reserved0xfec: u32,
  reserved0xff0: u32,
  reserved0xff4: u32,
  reserved0xff8: u32,
  reserved0xffc: u32,
  reserved0x1000: u32,
  /// [4100]: System Options Register 2
  pub sopt2: RW<u32>,
  reserved0x1008: u32,
  /// [4108]: System Options Register 4
  pub sopt4: RW<u32>,
  /// [4112]: System Options Register 5
  pub sopt5: RW<u32>,
  reserved0x1014: u32,
  /// [4120]: System Options Register 7
  pub sopt7: RW<u32>,
  reserved0x101c: u32,
  reserved0x1020: u32,
  /// [4132]: System Device Identification Register
  pub sdid: RO<u32>,
  /// [4136]: System Clock Gating Control Register 1
  pub scgc1: RW<u32>,
  /// [4140]: System Clock Gating Control Register 2
  pub scgc2: RW<u32>,
  /// [4144]: System Clock Gating Control Register 3
  pub scgc3: RW<u32>,
  /// [4148]: System Clock Gating Control Register 4
  pub scgc4: RW<u32>,
  /// [4152]: System Clock Gating Control Register 5
  pub scgc5: RW<u32>,
  /// [4156]: System Clock Gating Control Register 6
  pub scgc6: RW<u32>,
  /// [4160]: System Clock Gating Control Register 7
  pub scgc7: RW<u32>,
  /// [4164]: System Clock Divider Register 1
  pub clkdiv1: RW<u32>,
  /// [4168]: System Clock Divider Register 2
  pub clkdiv2: RW<u32>,
  /// [4172]: Flash Configuration Register 1
  pub fcfg1: RW<u32>,
  /// [4176]: Flash Configuration Register 2
  pub fcfg2: RO<u32>,
  /// [4180]: Unique Identification Register High
  pub uidh: RO<u32>,
  /// [4184]: Unique Identification Register Mid-High
  pub uidmh: RO<u32>,
  /// [4188]: Unique Identification Register Mid Low
  pub uidml: RO<u32>,
  /// [4192]: Unique Identification Register Low
  pub uidl: RO<u32>,
}

pub fn sim() -> *mut SIM {
  1074032640 as *mut SIM
}

#[repr(C)]
/// Pin Control and Interrupts
pub struct PORTA {
  /// [0]: Pin Control Register n
  pub pcr0: RW<u32>,
  /// [4]: Pin Control Register n
  pub pcr1: RW<u32>,
  /// [8]: Pin Control Register n
  pub pcr2: RW<u32>,
  /// [12]: Pin Control Register n
  pub pcr3: RW<u32>,
  /// [16]: Pin Control Register n
  pub pcr4: RW<u32>,
  /// [20]: Pin Control Register n
  pub pcr5: RW<u32>,
  /// [24]: Pin Control Register n
  pub pcr6: RW<u32>,
  /// [28]: Pin Control Register n
  pub pcr7: RW<u32>,
  /// [32]: Pin Control Register n
  pub pcr8: RW<u32>,
  /// [36]: Pin Control Register n
  pub pcr9: RW<u32>,
  /// [40]: Pin Control Register n
  pub pcr10: RW<u32>,
  /// [44]: Pin Control Register n
  pub pcr11: RW<u32>,
  /// [48]: Pin Control Register n
  pub pcr12: RW<u32>,
  /// [52]: Pin Control Register n
  pub pcr13: RW<u32>,
  /// [56]: Pin Control Register n
  pub pcr14: RW<u32>,
  /// [60]: Pin Control Register n
  pub pcr15: RW<u32>,
  /// [64]: Pin Control Register n
  pub pcr16: RW<u32>,
  /// [68]: Pin Control Register n
  pub pcr17: RW<u32>,
  /// [72]: Pin Control Register n
  pub pcr18: RW<u32>,
  /// [76]: Pin Control Register n
  pub pcr19: RW<u32>,
  /// [80]: Pin Control Register n
  pub pcr20: RW<u32>,
  /// [84]: Pin Control Register n
  pub pcr21: RW<u32>,
  /// [88]: Pin Control Register n
  pub pcr22: RW<u32>,
  /// [92]: Pin Control Register n
  pub pcr23: RW<u32>,
  /// [96]: Pin Control Register n
  pub pcr24: RW<u32>,
  /// [100]: Pin Control Register n
  pub pcr25: RW<u32>,
  /// [104]: Pin Control Register n
  pub pcr26: RW<u32>,
  /// [108]: Pin Control Register n
  pub pcr27: RW<u32>,
  /// [112]: Pin Control Register n
  pub pcr28: RW<u32>,
  /// [116]: Pin Control Register n
  pub pcr29: RW<u32>,
  /// [120]: Pin Control Register n
  pub pcr30: RW<u32>,
  /// [124]: Pin Control Register n
  pub pcr31: RW<u32>,
  /// [128]: Global Pin Control Low Register
  pub gpclr: WO<u32>,
  /// [132]: Global Pin Control High Register
  pub gpchr: WO<u32>,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  /// [160]: Interrupt Status Flag Register
  pub isfr: RW<u32>,
}

pub fn porta() -> *mut PORTA {
  1074040832 as *mut PORTA
}

#[repr(C)]
/// Pin Control and Interrupts
pub struct PORTB {
  /// [0]: Pin Control Register n
  pub pcr0: RW<u32>,
  /// [4]: Pin Control Register n
  pub pcr1: RW<u32>,
  /// [8]: Pin Control Register n
  pub pcr2: RW<u32>,
  /// [12]: Pin Control Register n
  pub pcr3: RW<u32>,
  /// [16]: Pin Control Register n
  pub pcr4: RW<u32>,
  /// [20]: Pin Control Register n
  pub pcr5: RW<u32>,
  /// [24]: Pin Control Register n
  pub pcr6: RW<u32>,
  /// [28]: Pin Control Register n
  pub pcr7: RW<u32>,
  /// [32]: Pin Control Register n
  pub pcr8: RW<u32>,
  /// [36]: Pin Control Register n
  pub pcr9: RW<u32>,
  /// [40]: Pin Control Register n
  pub pcr10: RW<u32>,
  /// [44]: Pin Control Register n
  pub pcr11: RW<u32>,
  /// [48]: Pin Control Register n
  pub pcr12: RW<u32>,
  /// [52]: Pin Control Register n
  pub pcr13: RW<u32>,
  /// [56]: Pin Control Register n
  pub pcr14: RW<u32>,
  /// [60]: Pin Control Register n
  pub pcr15: RW<u32>,
  /// [64]: Pin Control Register n
  pub pcr16: RW<u32>,
  /// [68]: Pin Control Register n
  pub pcr17: RW<u32>,
  /// [72]: Pin Control Register n
  pub pcr18: RW<u32>,
  /// [76]: Pin Control Register n
  pub pcr19: RW<u32>,
  /// [80]: Pin Control Register n
  pub pcr20: RW<u32>,
  /// [84]: Pin Control Register n
  pub pcr21: RW<u32>,
  /// [88]: Pin Control Register n
  pub pcr22: RW<u32>,
  /// [92]: Pin Control Register n
  pub pcr23: RW<u32>,
  /// [96]: Pin Control Register n
  pub pcr24: RW<u32>,
  /// [100]: Pin Control Register n
  pub pcr25: RW<u32>,
  /// [104]: Pin Control Register n
  pub pcr26: RW<u32>,
  /// [108]: Pin Control Register n
  pub pcr27: RW<u32>,
  /// [112]: Pin Control Register n
  pub pcr28: RW<u32>,
  /// [116]: Pin Control Register n
  pub pcr29: RW<u32>,
  /// [120]: Pin Control Register n
  pub pcr30: RW<u32>,
  /// [124]: Pin Control Register n
  pub pcr31: RW<u32>,
  /// [128]: Global Pin Control Low Register
  pub gpclr: WO<u32>,
  /// [132]: Global Pin Control High Register
  pub gpchr: WO<u32>,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  /// [160]: Interrupt Status Flag Register
  pub isfr: RW<u32>,
}

pub fn portb() -> *mut PORTB {
  1074044928 as *mut PORTB
}

#[repr(C)]
/// Pin Control and Interrupts
pub struct PORTC {
  /// [0]: Pin Control Register n
  pub pcr0: RW<u32>,
  /// [4]: Pin Control Register n
  pub pcr1: RW<u32>,
  /// [8]: Pin Control Register n
  pub pcr2: RW<u32>,
  /// [12]: Pin Control Register n
  pub pcr3: RW<u32>,
  /// [16]: Pin Control Register n
  pub pcr4: RW<u32>,
  /// [20]: Pin Control Register n
  pub pcr5: RW<u32>,
  /// [24]: Pin Control Register n
  pub pcr6: RW<u32>,
  /// [28]: Pin Control Register n
  pub pcr7: RW<u32>,
  /// [32]: Pin Control Register n
  pub pcr8: RW<u32>,
  /// [36]: Pin Control Register n
  pub pcr9: RW<u32>,
  /// [40]: Pin Control Register n
  pub pcr10: RW<u32>,
  /// [44]: Pin Control Register n
  pub pcr11: RW<u32>,
  /// [48]: Pin Control Register n
  pub pcr12: RW<u32>,
  /// [52]: Pin Control Register n
  pub pcr13: RW<u32>,
  /// [56]: Pin Control Register n
  pub pcr14: RW<u32>,
  /// [60]: Pin Control Register n
  pub pcr15: RW<u32>,
  /// [64]: Pin Control Register n
  pub pcr16: RW<u32>,
  /// [68]: Pin Control Register n
  pub pcr17: RW<u32>,
  /// [72]: Pin Control Register n
  pub pcr18: RW<u32>,
  /// [76]: Pin Control Register n
  pub pcr19: RW<u32>,
  /// [80]: Pin Control Register n
  pub pcr20: RW<u32>,
  /// [84]: Pin Control Register n
  pub pcr21: RW<u32>,
  /// [88]: Pin Control Register n
  pub pcr22: RW<u32>,
  /// [92]: Pin Control Register n
  pub pcr23: RW<u32>,
  /// [96]: Pin Control Register n
  pub pcr24: RW<u32>,
  /// [100]: Pin Control Register n
  pub pcr25: RW<u32>,
  /// [104]: Pin Control Register n
  pub pcr26: RW<u32>,
  /// [108]: Pin Control Register n
  pub pcr27: RW<u32>,
  /// [112]: Pin Control Register n
  pub pcr28: RW<u32>,
  /// [116]: Pin Control Register n
  pub pcr29: RW<u32>,
  /// [120]: Pin Control Register n
  pub pcr30: RW<u32>,
  /// [124]: Pin Control Register n
  pub pcr31: RW<u32>,
  /// [128]: Global Pin Control Low Register
  pub gpclr: WO<u32>,
  /// [132]: Global Pin Control High Register
  pub gpchr: WO<u32>,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  /// [160]: Interrupt Status Flag Register
  pub isfr: RW<u32>,
}

pub fn portc() -> *mut PORTC {
  1074049024 as *mut PORTC
}

#[repr(C)]
/// Pin Control and Interrupts
pub struct PORTD {
  /// [0]: Pin Control Register n
  pub pcr0: RW<u32>,
  /// [4]: Pin Control Register n
  pub pcr1: RW<u32>,
  /// [8]: Pin Control Register n
  pub pcr2: RW<u32>,
  /// [12]: Pin Control Register n
  pub pcr3: RW<u32>,
  /// [16]: Pin Control Register n
  pub pcr4: RW<u32>,
  /// [20]: Pin Control Register n
  pub pcr5: RW<u32>,
  /// [24]: Pin Control Register n
  pub pcr6: RW<u32>,
  /// [28]: Pin Control Register n
  pub pcr7: RW<u32>,
  /// [32]: Pin Control Register n
  pub pcr8: RW<u32>,
  /// [36]: Pin Control Register n
  pub pcr9: RW<u32>,
  /// [40]: Pin Control Register n
  pub pcr10: RW<u32>,
  /// [44]: Pin Control Register n
  pub pcr11: RW<u32>,
  /// [48]: Pin Control Register n
  pub pcr12: RW<u32>,
  /// [52]: Pin Control Register n
  pub pcr13: RW<u32>,
  /// [56]: Pin Control Register n
  pub pcr14: RW<u32>,
  /// [60]: Pin Control Register n
  pub pcr15: RW<u32>,
  /// [64]: Pin Control Register n
  pub pcr16: RW<u32>,
  /// [68]: Pin Control Register n
  pub pcr17: RW<u32>,
  /// [72]: Pin Control Register n
  pub pcr18: RW<u32>,
  /// [76]: Pin Control Register n
  pub pcr19: RW<u32>,
  /// [80]: Pin Control Register n
  pub pcr20: RW<u32>,
  /// [84]: Pin Control Register n
  pub pcr21: RW<u32>,
  /// [88]: Pin Control Register n
  pub pcr22: RW<u32>,
  /// [92]: Pin Control Register n
  pub pcr23: RW<u32>,
  /// [96]: Pin Control Register n
  pub pcr24: RW<u32>,
  /// [100]: Pin Control Register n
  pub pcr25: RW<u32>,
  /// [104]: Pin Control Register n
  pub pcr26: RW<u32>,
  /// [108]: Pin Control Register n
  pub pcr27: RW<u32>,
  /// [112]: Pin Control Register n
  pub pcr28: RW<u32>,
  /// [116]: Pin Control Register n
  pub pcr29: RW<u32>,
  /// [120]: Pin Control Register n
  pub pcr30: RW<u32>,
  /// [124]: Pin Control Register n
  pub pcr31: RW<u32>,
  /// [128]: Global Pin Control Low Register
  pub gpclr: WO<u32>,
  /// [132]: Global Pin Control High Register
  pub gpchr: WO<u32>,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  /// [160]: Interrupt Status Flag Register
  pub isfr: RW<u32>,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  /// [192]: Digital Filter Enable Register
  pub dfer: RW<u32>,
  /// [196]: Digital Filter Clock Register
  pub dfcr: RW<u32>,
  /// [200]: Digital Filter Width Register
  pub dfwr: RW<u32>,
}

pub fn portd() -> *mut PORTD {
  1074053120 as *mut PORTD
}

#[repr(C)]
/// Pin Control and Interrupts
pub struct PORTE {
  /// [0]: Pin Control Register n
  pub pcr0: RW<u32>,
  /// [4]: Pin Control Register n
  pub pcr1: RW<u32>,
  /// [8]: Pin Control Register n
  pub pcr2: RW<u32>,
  /// [12]: Pin Control Register n
  pub pcr3: RW<u32>,
  /// [16]: Pin Control Register n
  pub pcr4: RW<u32>,
  /// [20]: Pin Control Register n
  pub pcr5: RW<u32>,
  /// [24]: Pin Control Register n
  pub pcr6: RW<u32>,
  /// [28]: Pin Control Register n
  pub pcr7: RW<u32>,
  /// [32]: Pin Control Register n
  pub pcr8: RW<u32>,
  /// [36]: Pin Control Register n
  pub pcr9: RW<u32>,
  /// [40]: Pin Control Register n
  pub pcr10: RW<u32>,
  /// [44]: Pin Control Register n
  pub pcr11: RW<u32>,
  /// [48]: Pin Control Register n
  pub pcr12: RW<u32>,
  /// [52]: Pin Control Register n
  pub pcr13: RW<u32>,
  /// [56]: Pin Control Register n
  pub pcr14: RW<u32>,
  /// [60]: Pin Control Register n
  pub pcr15: RW<u32>,
  /// [64]: Pin Control Register n
  pub pcr16: RW<u32>,
  /// [68]: Pin Control Register n
  pub pcr17: RW<u32>,
  /// [72]: Pin Control Register n
  pub pcr18: RW<u32>,
  /// [76]: Pin Control Register n
  pub pcr19: RW<u32>,
  /// [80]: Pin Control Register n
  pub pcr20: RW<u32>,
  /// [84]: Pin Control Register n
  pub pcr21: RW<u32>,
  /// [88]: Pin Control Register n
  pub pcr22: RW<u32>,
  /// [92]: Pin Control Register n
  pub pcr23: RW<u32>,
  /// [96]: Pin Control Register n
  pub pcr24: RW<u32>,
  /// [100]: Pin Control Register n
  pub pcr25: RW<u32>,
  /// [104]: Pin Control Register n
  pub pcr26: RW<u32>,
  /// [108]: Pin Control Register n
  pub pcr27: RW<u32>,
  /// [112]: Pin Control Register n
  pub pcr28: RW<u32>,
  /// [116]: Pin Control Register n
  pub pcr29: RW<u32>,
  /// [120]: Pin Control Register n
  pub pcr30: RW<u32>,
  /// [124]: Pin Control Register n
  pub pcr31: RW<u32>,
  /// [128]: Global Pin Control Low Register
  pub gpclr: WO<u32>,
  /// [132]: Global Pin Control High Register
  pub gpchr: WO<u32>,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  /// [160]: Interrupt Status Flag Register
  pub isfr: RW<u32>,
}

pub fn porte() -> *mut PORTE {
  1074057216 as *mut PORTE
}

#[repr(C)]
/// Generation 2008 Watchdog Timer
pub struct WDOG {
  /// [0]: Watchdog Status and Control Register High
  pub stctrlh: RW<u32>,
  /// [2]: Watchdog Status and Control Register Low
  pub stctrll: RW<u32>,
  /// [4]: Watchdog Time-out Value Register High
  pub tovalh: RW<u32>,
  /// [6]: Watchdog Time-out Value Register Low
  pub tovall: RW<u32>,
  /// [8]: Watchdog Window Register High
  pub winh: RW<u32>,
  /// [10]: Watchdog Window Register Low
  pub winl: RW<u32>,
  /// [12]: Watchdog Refresh register
  pub refresh: RW<u32>,
  /// [14]: Watchdog Unlock register
  pub unlock: RW<u32>,
  /// [16]: Watchdog Timer Output Register High
  pub tmrouth: RW<u32>,
  /// [18]: Watchdog Timer Output Register Low
  pub tmroutl: RW<u32>,
  /// [20]: Watchdog Reset Count register
  pub rstcnt: RW<u32>,
  /// [22]: Watchdog Prescaler register
  pub presc: RW<u32>,
}

pub fn wdog() -> *mut WDOG {
  1074077696 as *mut WDOG
}

#[repr(C)]
/// External Watchdog Monitor
pub struct EWM {
  /// [0]: Control Register
  pub ctrl: RW<u32>,
  /// [1]: Service Register
  pub serv: WO<u32>,
  /// [2]: Compare Low Register
  pub cmpl: RW<u32>,
  /// [3]: Compare High Register
  pub cmph: RW<u32>,
}

pub fn ewm() -> *mut EWM {
  1074139136 as *mut EWM
}

#[repr(C)]
/// Carrier Modulator Transmitter
pub struct CMT {
  /// [0]: CMT Carrier Generator High Data Register 1
  pub cgh1: RW<u32>,
  /// [1]: CMT Carrier Generator Low Data Register 1
  pub cgl1: RW<u32>,
  /// [2]: CMT Carrier Generator High Data Register 2
  pub cgh2: RW<u32>,
  /// [3]: CMT Carrier Generator Low Data Register 2
  pub cgl2: RW<u32>,
  /// [4]: CMT Output Control Register
  pub oc: RW<u32>,
  /// [5]: CMT Modulator Status and Control Register
  pub msc: RW<u32>,
  /// [6]: CMT Modulator Data Register Mark High
  pub cmd1: RW<u32>,
  /// [7]: CMT Modulator Data Register Mark Low
  pub cmd2: RW<u32>,
  /// [8]: CMT Modulator Data Register Space High
  pub cmd3: RW<u32>,
  /// [9]: CMT Modulator Data Register Space Low
  pub cmd4: RW<u32>,
  /// [10]: CMT Primary Prescaler Register
  pub pps: RW<u32>,
  /// [11]: CMT Direct Memory Access Register
  pub dma: RW<u32>,
}

pub fn cmt() -> *mut CMT {
  1074143232 as *mut CMT
}

#[repr(C)]
/// Multipurpose Clock Generator module
pub struct MCG {
  /// [0]: MCG Control 1 Register
  pub c1: RW<u32>,
  /// [1]: MCG Control 2 Register
  pub c2: RW<u32>,
  /// [2]: MCG Control 3 Register
  pub c3: RW<u32>,
  /// [3]: MCG Control 4 Register
  pub c4: RW<u32>,
  /// [4]: MCG Control 5 Register
  pub c5: RW<u32>,
  /// [5]: MCG Control 6 Register
  pub c6: RW<u32>,
  /// [6]: MCG Status Register
  pub s: RW<u32>,
  /// [8]: MCG Status and Control Register
  pub sc: RW<u32>,
  /// [10]: MCG Auto Trim Compare Value High Register
  pub atcvh: RW<u32>,
  /// [11]: MCG Auto Trim Compare Value Low Register
  pub atcvl: RW<u32>,
  /// [12]: MCG Control 7 Register
  pub c7: RW<u32>,
  /// [13]: MCG Control 8 Register
  pub c8: RW<u32>,
}

pub fn mcg() -> *mut MCG {
  1074151424 as *mut MCG
}

#[repr(C)]
/// Oscillator
pub struct OSC {
  /// [0]: OSC Control Register
  pub cr: RW<u32>,
}

pub fn osc() -> *mut OSC {
  1074155520 as *mut OSC
}

#[repr(C)]
/// Inter-Integrated Circuit
pub struct I2C0 {
  /// [0]: I2C Address Register 1
  pub a1: RW<u32>,
  /// [1]: I2C Frequency Divider register
  pub f: RW<u32>,
  /// [2]: I2C Control Register 1
  pub c1: RW<u32>,
  /// [3]: I2C Status register
  pub s: RW<u32>,
  /// [4]: I2C Data I/O register
  pub d: RW<u32>,
  /// [5]: I2C Control Register 2
  pub c2: RW<u32>,
  /// [6]: I2C Programmable Input Glitch Filter register
  pub flt: RW<u32>,
  /// [7]: I2C Range Address register
  pub ra: RW<u32>,
  /// [8]: I2C SMBus Control and Status register
  pub smb: RW<u32>,
  /// [9]: I2C Address Register 2
  pub a2: RW<u32>,
  /// [10]: I2C SCL Low Timeout Register High
  pub slth: RW<u32>,
  /// [11]: I2C SCL Low Timeout Register Low
  pub sltl: RW<u32>,
}

pub fn i2c0() -> *mut I2C0 {
  1074159616 as *mut I2C0
}

#[repr(C)]
/// Inter-Integrated Circuit
pub struct I2C1 {
  /// [0]: I2C Address Register 1
  pub a1: RW<u32>,
  /// [1]: I2C Frequency Divider register
  pub f: RW<u32>,
  /// [2]: I2C Control Register 1
  pub c1: RW<u32>,
  /// [3]: I2C Status register
  pub s: RW<u32>,
  /// [4]: I2C Data I/O register
  pub d: RW<u32>,
  /// [5]: I2C Control Register 2
  pub c2: RW<u32>,
  /// [6]: I2C Programmable Input Glitch Filter register
  pub flt: RW<u32>,
  /// [7]: I2C Range Address register
  pub ra: RW<u32>,
  /// [8]: I2C SMBus Control and Status register
  pub smb: RW<u32>,
  /// [9]: I2C Address Register 2
  pub a2: RW<u32>,
  /// [10]: I2C SCL Low Timeout Register High
  pub slth: RW<u32>,
  /// [11]: I2C SCL Low Timeout Register Low
  pub sltl: RW<u32>,
}

pub fn i2c1() -> *mut I2C1 {
  1074163712 as *mut I2C1
}

#[repr(C)]
/// Inter-Integrated Circuit
pub struct I2C2 {
  /// [0]: I2C Address Register 1
  pub a1: RW<u32>,
  /// [1]: I2C Frequency Divider register
  pub f: RW<u32>,
  /// [2]: I2C Control Register 1
  pub c1: RW<u32>,
  /// [3]: I2C Status register
  pub s: RW<u32>,
  /// [4]: I2C Data I/O register
  pub d: RW<u32>,
  /// [5]: I2C Control Register 2
  pub c2: RW<u32>,
  /// [6]: I2C Programmable Input Glitch Filter register
  pub flt: RW<u32>,
  /// [7]: I2C Range Address register
  pub ra: RW<u32>,
  /// [8]: I2C SMBus Control and Status register
  pub smb: RW<u32>,
  /// [9]: I2C Address Register 2
  pub a2: RW<u32>,
  /// [10]: I2C SCL Low Timeout Register High
  pub slth: RW<u32>,
  /// [11]: I2C SCL Low Timeout Register Low
  pub sltl: RW<u32>,
}

pub fn i2c2() -> *mut I2C2 {
  1074683904 as *mut I2C2
}

#[repr(C)]
/// Serial Communication Interface
pub struct UART0 {
  /// [0]: UART Baud Rate Registers: High
  pub bdh: RW<u32>,
  /// [1]: UART Baud Rate Registers: Low
  pub bdl: RW<u32>,
  /// [2]: UART Control Register 1
  pub c1: RW<u32>,
  /// [3]: UART Control Register 2
  pub c2: RW<u32>,
  /// [4]: UART Status Register 1
  pub s1: RO<u32>,
  /// [5]: UART Status Register 2
  pub s2: RW<u32>,
  /// [6]: UART Control Register 3
  pub c3: RW<u32>,
  /// [7]: UART Data Register
  pub d: RW<u32>,
  /// [8]: UART Match Address Registers 1
  pub ma1: RW<u32>,
  /// [9]: UART Match Address Registers 2
  pub ma2: RW<u32>,
  /// [10]: UART Control Register 4
  pub c4: RW<u32>,
  /// [11]: UART Control Register 5
  pub c5: RW<u32>,
  /// [12]: UART Extended Data Register
  pub ed: RO<u32>,
  /// [13]: UART Modem Register
  pub modem: RW<u32>,
  /// [14]: UART Infrared Register
  pub ir: RW<u32>,
  /// [16]: UART FIFO Parameters
  pub pfifo: RW<u32>,
  /// [17]: UART FIFO Control Register
  pub cfifo: RW<u32>,
  /// [18]: UART FIFO Status Register
  pub sfifo: RW<u32>,
  /// [19]: UART FIFO Transmit Watermark
  pub twfifo: RW<u32>,
  /// [20]: UART FIFO Transmit Count
  pub tcfifo: RO<u32>,
  /// [21]: UART FIFO Receive Watermark
  pub rwfifo: RW<u32>,
  /// [22]: UART FIFO Receive Count
  pub rcfifo: RO<u32>,
  /// [24]: UART 7816 Control Register
  pub c7816: RW<u32>,
  /// [25]: UART 7816 Interrupt Enable Register
  pub ie7816: RW<u32>,
  /// [26]: UART 7816 Interrupt Status Register
  pub is7816: RW<u32>,
  /// [27]: UART 7816 Wait Parameter Register
  pub wp7816t1: RW<u32>,
  /// [28]: UART 7816 Wait N Register
  pub wn7816: RW<u32>,
  /// [29]: UART 7816 Wait FD Register
  pub wf7816: RW<u32>,
  /// [30]: UART 7816 Error Threshold Register
  pub et7816: RW<u32>,
  /// [31]: UART 7816 Transmit Length Register
  pub tl7816: RW<u32>,
}

pub fn uart0() -> *mut UART0 {
  1074176000 as *mut UART0
}

#[repr(C)]
/// Serial Communication Interface
pub struct UART1 {
  /// [0]: UART Baud Rate Registers: High
  pub bdh: RW<u32>,
  /// [1]: UART Baud Rate Registers: Low
  pub bdl: RW<u32>,
  /// [2]: UART Control Register 1
  pub c1: RW<u32>,
  /// [3]: UART Control Register 2
  pub c2: RW<u32>,
  /// [4]: UART Status Register 1
  pub s1: RO<u32>,
  /// [5]: UART Status Register 2
  pub s2: RW<u32>,
  /// [6]: UART Control Register 3
  pub c3: RW<u32>,
  /// [7]: UART Data Register
  pub d: RW<u32>,
  /// [8]: UART Match Address Registers 1
  pub ma1: RW<u32>,
  /// [9]: UART Match Address Registers 2
  pub ma2: RW<u32>,
  /// [10]: UART Control Register 4
  pub c4: RW<u32>,
  /// [11]: UART Control Register 5
  pub c5: RW<u32>,
  /// [12]: UART Extended Data Register
  pub ed: RO<u32>,
  /// [13]: UART Modem Register
  pub modem: RW<u32>,
  /// [14]: UART Infrared Register
  pub ir: RW<u32>,
  /// [16]: UART FIFO Parameters
  pub pfifo: RW<u32>,
  /// [17]: UART FIFO Control Register
  pub cfifo: RW<u32>,
  /// [18]: UART FIFO Status Register
  pub sfifo: RW<u32>,
  /// [19]: UART FIFO Transmit Watermark
  pub twfifo: RW<u32>,
  /// [20]: UART FIFO Transmit Count
  pub tcfifo: RO<u32>,
  /// [21]: UART FIFO Receive Watermark
  pub rwfifo: RW<u32>,
  /// [22]: UART FIFO Receive Count
  pub rcfifo: RO<u32>,
}

pub fn uart1() -> *mut UART1 {
  1074180096 as *mut UART1
}

#[repr(C)]
/// Serial Communication Interface
pub struct UART2 {
  /// [0]: UART Baud Rate Registers: High
  pub bdh: RW<u32>,
  /// [1]: UART Baud Rate Registers: Low
  pub bdl: RW<u32>,
  /// [2]: UART Control Register 1
  pub c1: RW<u32>,
  /// [3]: UART Control Register 2
  pub c2: RW<u32>,
  /// [4]: UART Status Register 1
  pub s1: RO<u32>,
  /// [5]: UART Status Register 2
  pub s2: RW<u32>,
  /// [6]: UART Control Register 3
  pub c3: RW<u32>,
  /// [7]: UART Data Register
  pub d: RW<u32>,
  /// [8]: UART Match Address Registers 1
  pub ma1: RW<u32>,
  /// [9]: UART Match Address Registers 2
  pub ma2: RW<u32>,
  /// [10]: UART Control Register 4
  pub c4: RW<u32>,
  /// [11]: UART Control Register 5
  pub c5: RW<u32>,
  /// [12]: UART Extended Data Register
  pub ed: RO<u32>,
  /// [13]: UART Modem Register
  pub modem: RW<u32>,
  /// [14]: UART Infrared Register
  pub ir: RW<u32>,
  /// [16]: UART FIFO Parameters
  pub pfifo: RW<u32>,
  /// [17]: UART FIFO Control Register
  pub cfifo: RW<u32>,
  /// [18]: UART FIFO Status Register
  pub sfifo: RW<u32>,
  /// [19]: UART FIFO Transmit Watermark
  pub twfifo: RW<u32>,
  /// [20]: UART FIFO Transmit Count
  pub tcfifo: RO<u32>,
  /// [21]: UART FIFO Receive Watermark
  pub rwfifo: RW<u32>,
  /// [22]: UART FIFO Receive Count
  pub rcfifo: RO<u32>,
}

pub fn uart2() -> *mut UART2 {
  1074184192 as *mut UART2
}

#[repr(C)]
/// Serial Communication Interface
pub struct UART3 {
  /// [0]: UART Baud Rate Registers: High
  pub bdh: RW<u32>,
  /// [1]: UART Baud Rate Registers: Low
  pub bdl: RW<u32>,
  /// [2]: UART Control Register 1
  pub c1: RW<u32>,
  /// [3]: UART Control Register 2
  pub c2: RW<u32>,
  /// [4]: UART Status Register 1
  pub s1: RO<u32>,
  /// [5]: UART Status Register 2
  pub s2: RW<u32>,
  /// [6]: UART Control Register 3
  pub c3: RW<u32>,
  /// [7]: UART Data Register
  pub d: RW<u32>,
  /// [8]: UART Match Address Registers 1
  pub ma1: RW<u32>,
  /// [9]: UART Match Address Registers 2
  pub ma2: RW<u32>,
  /// [10]: UART Control Register 4
  pub c4: RW<u32>,
  /// [11]: UART Control Register 5
  pub c5: RW<u32>,
  /// [12]: UART Extended Data Register
  pub ed: RO<u32>,
  /// [13]: UART Modem Register
  pub modem: RW<u32>,
  /// [14]: UART Infrared Register
  pub ir: RW<u32>,
  /// [16]: UART FIFO Parameters
  pub pfifo: RW<u32>,
  /// [17]: UART FIFO Control Register
  pub cfifo: RW<u32>,
  /// [18]: UART FIFO Status Register
  pub sfifo: RW<u32>,
  /// [19]: UART FIFO Transmit Watermark
  pub twfifo: RW<u32>,
  /// [20]: UART FIFO Transmit Count
  pub tcfifo: RO<u32>,
  /// [21]: UART FIFO Receive Watermark
  pub rwfifo: RW<u32>,
  /// [22]: UART FIFO Receive Count
  pub rcfifo: RO<u32>,
}

pub fn uart3() -> *mut UART3 {
  1074188288 as *mut UART3
}

#[repr(C)]
/// Serial Communication Interface
pub struct UART4 {
  /// [0]: UART Baud Rate Registers: High
  pub bdh: RW<u32>,
  /// [1]: UART Baud Rate Registers: Low
  pub bdl: RW<u32>,
  /// [2]: UART Control Register 1
  pub c1: RW<u32>,
  /// [3]: UART Control Register 2
  pub c2: RW<u32>,
  /// [4]: UART Status Register 1
  pub s1: RO<u32>,
  /// [5]: UART Status Register 2
  pub s2: RW<u32>,
  /// [6]: UART Control Register 3
  pub c3: RW<u32>,
  /// [7]: UART Data Register
  pub d: RW<u32>,
  /// [8]: UART Match Address Registers 1
  pub ma1: RW<u32>,
  /// [9]: UART Match Address Registers 2
  pub ma2: RW<u32>,
  /// [10]: UART Control Register 4
  pub c4: RW<u32>,
  /// [11]: UART Control Register 5
  pub c5: RW<u32>,
  /// [12]: UART Extended Data Register
  pub ed: RO<u32>,
  /// [13]: UART Modem Register
  pub modem: RW<u32>,
  /// [14]: UART Infrared Register
  pub ir: RW<u32>,
  /// [16]: UART FIFO Parameters
  pub pfifo: RW<u32>,
  /// [17]: UART FIFO Control Register
  pub cfifo: RW<u32>,
  /// [18]: UART FIFO Status Register
  pub sfifo: RW<u32>,
  /// [19]: UART FIFO Transmit Watermark
  pub twfifo: RW<u32>,
  /// [20]: UART FIFO Transmit Count
  pub tcfifo: RO<u32>,
  /// [21]: UART FIFO Receive Watermark
  pub rwfifo: RW<u32>,
  /// [22]: UART FIFO Receive Count
  pub rcfifo: RO<u32>,
}

pub fn uart4() -> *mut UART4 {
  1074700288 as *mut UART4
}

#[repr(C)]
/// Serial Communication Interface
pub struct UART5 {
  /// [0]: UART Baud Rate Registers: High
  pub bdh: RW<u32>,
  /// [1]: UART Baud Rate Registers: Low
  pub bdl: RW<u32>,
  /// [2]: UART Control Register 1
  pub c1: RW<u32>,
  /// [3]: UART Control Register 2
  pub c2: RW<u32>,
  /// [4]: UART Status Register 1
  pub s1: RO<u32>,
  /// [5]: UART Status Register 2
  pub s2: RW<u32>,
  /// [6]: UART Control Register 3
  pub c3: RW<u32>,
  /// [7]: UART Data Register
  pub d: RW<u32>,
  /// [8]: UART Match Address Registers 1
  pub ma1: RW<u32>,
  /// [9]: UART Match Address Registers 2
  pub ma2: RW<u32>,
  /// [10]: UART Control Register 4
  pub c4: RW<u32>,
  /// [11]: UART Control Register 5
  pub c5: RW<u32>,
  /// [12]: UART Extended Data Register
  pub ed: RO<u32>,
  /// [13]: UART Modem Register
  pub modem: RW<u32>,
  /// [14]: UART Infrared Register
  pub ir: RW<u32>,
  /// [16]: UART FIFO Parameters
  pub pfifo: RW<u32>,
  /// [17]: UART FIFO Control Register
  pub cfifo: RW<u32>,
  /// [18]: UART FIFO Status Register
  pub sfifo: RW<u32>,
  /// [19]: UART FIFO Transmit Watermark
  pub twfifo: RW<u32>,
  /// [20]: UART FIFO Transmit Count
  pub tcfifo: RO<u32>,
  /// [21]: UART FIFO Receive Watermark
  pub rwfifo: RW<u32>,
  /// [22]: UART FIFO Receive Count
  pub rcfifo: RO<u32>,
}

pub fn uart5() -> *mut UART5 {
  1074704384 as *mut UART5
}

#[repr(C)]
/// Universal Serial Bus, OTG Capable Controller
pub struct USB0 {
  /// [0]: Peripheral ID register
  pub perid: RO<u32>,
  /// [4]: Peripheral ID Complement register
  pub idcomp: RO<u32>,
  /// [8]: Peripheral Revision register
  pub rev: RO<u32>,
  /// [12]: Peripheral Additional Info register
  pub addinfo: RO<u32>,
  /// [16]: OTG Interrupt Status register
  pub otgistat: RW<u32>,
  /// [20]: OTG Interrupt Control register
  pub otgicr: RW<u32>,
  /// [24]: OTG Status register
  pub otgstat: RW<u32>,
  /// [28]: OTG Control register
  pub otgctl: RW<u32>,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  /// [128]: Interrupt Status register
  pub istat: RW<u32>,
  /// [132]: Interrupt Enable register
  pub inten: RW<u32>,
  /// [136]: Error Interrupt Status register
  pub errstat: RW<u32>,
  /// [140]: Error Interrupt Enable register
  pub erren: RW<u32>,
  /// [144]: Status register
  pub stat: RO<u32>,
  /// [148]: Control register
  pub ctl: RW<u32>,
  /// [152]: Address register
  pub addr: RW<u32>,
  /// [156]: BDT Page register 1
  pub bdtpage1: RW<u32>,
  /// [160]: Frame Number register Low
  pub frmnuml: RW<u32>,
  /// [164]: Frame Number register High
  pub frmnumh: RW<u32>,
  /// [168]: Token register
  pub token: RW<u32>,
  /// [172]: SOF Threshold register
  pub softhld: RW<u32>,
  /// [176]: BDT Page Register 2
  pub bdtpage2: RW<u32>,
  /// [180]: BDT Page Register 3
  pub bdtpage3: RW<u32>,
  reserved0xb8: u32,
  reserved0xbc: u32,
  /// [192]: Endpoint Control register
  pub endpts: RW<u32>,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  /// [256]: USB Control register
  pub usbctrl: RW<u32>,
  /// [260]: USB OTG Observe register
  pub observe: RO<u32>,
  /// [264]: USB OTG Control register
  pub control: RW<u32>,
  /// [268]: USB Transceiver Control register 0
  pub usbtrc0: RW<u32>,
  reserved0x110: u32,
  /// [276]: Frame Adjust Register
  pub usbfrmadjust: RW<u32>,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  /// [320]: USB Clock recovery control
  pub clk_recover_ctrl: RW<u32>,
  /// [324]: IRC48M oscillator enable register
  pub clk_recover_irc_en: RW<u32>,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  /// [348]: Clock recovery separated interrupt status
  pub clk_recover_int_status: RW<u32>,
}

pub fn usb0() -> *mut USB0 {
  1074208768 as *mut USB0
}

#[repr(C)]
/// High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
pub struct CMP0 {
  /// [0]: CMP Control Register 0
  pub cr0: RW<u32>,
  /// [1]: CMP Control Register 1
  pub cr1: RW<u32>,
  /// [2]: CMP Filter Period Register
  pub fpr: RW<u32>,
  /// [3]: CMP Status and Control Register
  pub scr: RW<u32>,
  /// [4]: DAC Control Register
  pub daccr: RW<u32>,
  /// [5]: MUX Control Register
  pub muxcr: RW<u32>,
}

pub fn cmp0() -> *mut CMP0 {
  1074212864 as *mut CMP0
}

#[repr(C)]
/// High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
pub struct CMP1 {
  /// [0]: CMP Control Register 0
  pub cr0: RW<u32>,
  /// [1]: CMP Control Register 1
  pub cr1: RW<u32>,
  /// [2]: CMP Filter Period Register
  pub fpr: RW<u32>,
  /// [3]: CMP Status and Control Register
  pub scr: RW<u32>,
  /// [4]: DAC Control Register
  pub daccr: RW<u32>,
  /// [5]: MUX Control Register
  pub muxcr: RW<u32>,
}

pub fn cmp1() -> *mut CMP1 {
  1074212872 as *mut CMP1
}

#[repr(C)]
/// High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
pub struct CMP2 {
  /// [0]: CMP Control Register 0
  pub cr0: RW<u32>,
  /// [1]: CMP Control Register 1
  pub cr1: RW<u32>,
  /// [2]: CMP Filter Period Register
  pub fpr: RW<u32>,
  /// [3]: CMP Status and Control Register
  pub scr: RW<u32>,
  /// [4]: DAC Control Register
  pub daccr: RW<u32>,
  /// [5]: MUX Control Register
  pub muxcr: RW<u32>,
}

pub fn cmp2() -> *mut CMP2 {
  1074212880 as *mut CMP2
}

#[repr(C)]
/// Voltage Reference
pub struct VREF {
  /// [0]: VREF Trim Register
  pub trm: RW<u32>,
  /// [1]: VREF Status and Control Register
  pub sc: RW<u32>,
}

pub fn vref() -> *mut VREF {
  1074216960 as *mut VREF
}

#[repr(C)]
/// Low leakage wakeup unit
pub struct LLWU {
  /// [0]: LLWU Pin Enable 1 register
  pub pe1: RW<u32>,
  /// [1]: LLWU Pin Enable 2 register
  pub pe2: RW<u32>,
  /// [2]: LLWU Pin Enable 3 register
  pub pe3: RW<u32>,
  /// [3]: LLWU Pin Enable 4 register
  pub pe4: RW<u32>,
  /// [4]: LLWU Module Enable register
  pub me: RW<u32>,
  /// [5]: LLWU Flag 1 register
  pub f1: RW<u32>,
  /// [6]: LLWU Flag 2 register
  pub f2: RW<u32>,
  /// [7]: LLWU Flag 3 register
  pub f3: RO<u32>,
  /// [8]: LLWU Pin Filter 1 register
  pub filt1: RW<u32>,
  /// [9]: LLWU Pin Filter 2 register
  pub filt2: RW<u32>,
  /// [10]: LLWU Reset Enable register
  pub rst: RW<u32>,
}

pub fn llwu() -> *mut LLWU {
  1074249728 as *mut LLWU
}

#[repr(C)]
/// Power Management Controller
pub struct PMC {
  /// [0]: Low Voltage Detect Status And Control 1 register
  pub lvdsc1: RW<u32>,
  /// [1]: Low Voltage Detect Status And Control 2 register
  pub lvdsc2: RW<u32>,
  /// [2]: Regulator Status And Control register
  pub regsc: RW<u32>,
}

pub fn pmc() -> *mut PMC {
  1074253824 as *mut PMC
}

#[repr(C)]
/// System Mode Controller
pub struct SMC {
  /// [0]: Power Mode Protection register
  pub pmprot: RW<u32>,
  /// [1]: Power Mode Control register
  pub pmctrl: RW<u32>,
  /// [2]: VLLS Control register
  pub vllsctrl: RW<u32>,
  /// [3]: Power Mode Status register
  pub pmstat: RO<u32>,
}

pub fn smc() -> *mut SMC {
  1074257920 as *mut SMC
}

#[repr(C)]
/// Reset Control Module
pub struct RCM {
  /// [0]: System Reset Status Register 0
  pub srs0: RO<u32>,
  /// [1]: System Reset Status Register 1
  pub srs1: RO<u32>,
  /// [4]: Reset Pin Filter Control register
  pub rpfc: RW<u32>,
  /// [5]: Reset Pin Filter Width register
  pub rpfw: RW<u32>,
  /// [7]: Mode Register
  pub mr: RO<u32>,
}

pub fn rcm() -> *mut RCM {
  1074262016 as *mut RCM
}

#[repr(C)]
/// Secured Digital Host Controller
pub struct SDHC {
  /// [0]: DMA System Address register
  pub dsaddr: RW<u32>,
  /// [4]: Block Attributes register
  pub blkattr: RW<u32>,
  /// [8]: Command Argument register
  pub cmdarg: RW<u32>,
  /// [12]: Transfer Type register
  pub xfertyp: RW<u32>,
  /// [16]: Command Response 0
  pub cmdrsp0: RO<u32>,
  /// [20]: Command Response 1
  pub cmdrsp1: RO<u32>,
  /// [24]: Command Response 2
  pub cmdrsp2: RO<u32>,
  /// [28]: Command Response 3
  pub cmdrsp3: RO<u32>,
  /// [32]: Buffer Data Port register
  pub datport: RW<u32>,
  /// [36]: Present State register
  pub prsstat: RO<u32>,
  /// [40]: Protocol Control register
  pub proctl: RW<u32>,
  /// [44]: System Control register
  pub sysctl: RW<u32>,
  /// [48]: Interrupt Status register
  pub irqstat: RW<u32>,
  /// [52]: Interrupt Status Enable register
  pub irqstaten: RW<u32>,
  /// [56]: Interrupt Signal Enable register
  pub irqsigen: RW<u32>,
  /// [60]: Auto CMD12 Error Status Register
  pub ac12err: RO<u32>,
  /// [64]: Host Controller Capabilities
  pub htcapblt: RO<u32>,
  /// [68]: Watermark Level Register
  pub wml: RW<u32>,
  reserved0x48: u32,
  reserved0x4c: u32,
  /// [80]: Force Event register
  pub fevt: WO<u32>,
  /// [84]: ADMA Error Status register
  pub admaes: RO<u32>,
  /// [88]: ADMA System Addressregister
  pub adsaddr: RW<u32>,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  /// [192]: Vendor Specific register
  pub vendor: RW<u32>,
  /// [196]: MMC Boot register
  pub mmcboot: RW<u32>,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  /// [252]: Host Controller Version
  pub hostver: RO<u32>,
}

pub fn sdhc() -> *mut SDHC {
  1074466816 as *mut SDHC
}

#[repr(C)]
/// Ethernet MAC-NET Core
pub struct ENET {
  reserved0x0: u32,
  /// [4]: Interrupt Event Register
  pub eir: RW<u32>,
  /// [8]: Interrupt Mask Register
  pub eimr: RW<u32>,
  reserved0xc: u32,
  /// [16]: Receive Descriptor Active Register
  pub rdar: RW<u32>,
  /// [20]: Transmit Descriptor Active Register
  pub tdar: RW<u32>,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  /// [36]: Ethernet Control Register
  pub ecr: RW<u32>,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  /// [64]: MII Management Frame Register
  pub mmfr: RW<u32>,
  /// [68]: MII Speed Control Register
  pub mscr: RW<u32>,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  /// [100]: MIB Control Register
  pub mibc: RW<u32>,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  /// [132]: Receive Control Register
  pub rcr: RW<u32>,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  /// [196]: Transmit Control Register
  pub tcr: RW<u32>,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  /// [228]: Physical Address Lower Register
  pub palr: RW<u32>,
  /// [232]: Physical Address Upper Register
  pub paur: RW<u32>,
  /// [236]: Opcode/Pause Duration Register
  pub opd: RW<u32>,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  reserved0x100: u32,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  /// [280]: Descriptor Individual Upper Address Register
  pub iaur: RW<u32>,
  /// [284]: Descriptor Individual Lower Address Register
  pub ialr: RW<u32>,
  /// [288]: Descriptor Group Upper Address Register
  pub gaur: RW<u32>,
  /// [292]: Descriptor Group Lower Address Register
  pub galr: RW<u32>,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  /// [324]: Transmit FIFO Watermark Register
  pub tfwr: RW<u32>,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  /// [384]: Receive Descriptor Ring Start Register
  pub rdsr: RW<u32>,
  /// [388]: Transmit Buffer Descriptor Ring Start Register
  pub tdsr: RW<u32>,
  /// [392]: Maximum Receive Buffer Size Register
  pub mrbr: RW<u32>,
  reserved0x18c: u32,
  /// [400]: Receive FIFO Section Full Threshold
  pub rsfl: RW<u32>,
  /// [404]: Receive FIFO Section Empty Threshold
  pub rsem: RW<u32>,
  /// [408]: Receive FIFO Almost Empty Threshold
  pub raem: RW<u32>,
  /// [412]: Receive FIFO Almost Full Threshold
  pub rafl: RW<u32>,
  /// [416]: Transmit FIFO Section Empty Threshold
  pub tsem: RW<u32>,
  /// [420]: Transmit FIFO Almost Empty Threshold
  pub taem: RW<u32>,
  /// [424]: Transmit FIFO Almost Full Threshold
  pub tafl: RW<u32>,
  /// [428]: Transmit Inter-Packet Gap
  pub tipg: RW<u32>,
  /// [432]: Frame Truncation Length
  pub ftrl: RW<u32>,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  /// [448]: Transmit Accelerator Function Configuration
  pub tacc: RW<u32>,
  /// [452]: Receive Accelerator Function Configuration
  pub racc: RW<u32>,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  /// [516]: Tx Packet Count Statistic Register
  pub rmon_t_packets: RO<u32>,
  /// [520]: Tx Broadcast Packets Statistic Register
  pub rmon_t_bc_pkt: RO<u32>,
  /// [524]: Tx Multicast Packets Statistic Register
  pub rmon_t_mc_pkt: RO<u32>,
  /// [528]: Tx Packets with CRC/Align Error Statistic Register
  pub rmon_t_crc_align: RO<u32>,
  /// [532]: Tx Packets Less Than Bytes and Good CRC Statistic Register
  pub rmon_t_undersize: RO<u32>,
  /// [536]: Tx Packets GT MAX_FL bytes and Good CRC Statistic Register
  pub rmon_t_oversize: RO<u32>,
  /// [540]: Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register
  pub rmon_t_frag: RO<u32>,
  /// [544]: Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register
  pub rmon_t_jab: RO<u32>,
  /// [548]: Tx Collision Count Statistic Register
  pub rmon_t_col: RO<u32>,
  /// [552]: Tx 64-Byte Packets Statistic Register
  pub rmon_t_p64: RO<u32>,
  /// [556]: Tx 65- to 127-byte Packets Statistic Register
  pub rmon_t_p65to127: RO<u32>,
  /// [560]: Tx 128- to 255-byte Packets Statistic Register
  pub rmon_t_p128to255: RO<u32>,
  /// [564]: Tx 256- to 511-byte Packets Statistic Register
  pub rmon_t_p256to511: RO<u32>,
  /// [568]: Tx 512- to 1023-byte Packets Statistic Register
  pub rmon_t_p512to1023: RO<u32>,
  /// [572]: Tx 1024- to 2047-byte Packets Statistic Register
  pub rmon_t_p1024to2047: RO<u32>,
  /// [576]: Tx Packets Greater Than 2048 Bytes Statistic Register
  pub rmon_t_p_gte2048: RO<u32>,
  /// [580]: Tx Octets Statistic Register
  pub rmon_t_octets: RO<u32>,
  reserved0x248: u32,
  /// [588]: Frames Transmitted OK Statistic Register
  pub ieee_t_frame_ok: RO<u32>,
  /// [592]: Frames Transmitted with Single Collision Statistic Register
  pub ieee_t_1col: RO<u32>,
  /// [596]: Frames Transmitted with Multiple Collisions Statistic Register
  pub ieee_t_mcol: RO<u32>,
  /// [600]: Frames Transmitted after Deferral Delay Statistic Register
  pub ieee_t_def: RO<u32>,
  /// [604]: Frames Transmitted with Late Collision Statistic Register
  pub ieee_t_lcol: RO<u32>,
  /// [608]: Frames Transmitted with Excessive Collisions Statistic Register
  pub ieee_t_excol: RO<u32>,
  /// [612]: Frames Transmitted with Tx FIFO Underrun Statistic Register
  pub ieee_t_macerr: RO<u32>,
  /// [616]: Frames Transmitted with Carrier Sense Error Statistic Register
  pub ieee_t_cserr: RO<u32>,
  reserved0x26c: u32,
  /// [624]: Flow Control Pause Frames Transmitted Statistic Register
  pub ieee_t_fdxfc: RO<u32>,
  /// [628]: Octet Count for Frames Transmitted w/o Error Statistic Register
  pub ieee_t_octets_ok: RO<u32>,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  /// [644]: Rx Packet Count Statistic Register
  pub rmon_r_packets: RO<u32>,
  /// [648]: Rx Broadcast Packets Statistic Register
  pub rmon_r_bc_pkt: RO<u32>,
  /// [652]: Rx Multicast Packets Statistic Register
  pub rmon_r_mc_pkt: RO<u32>,
  /// [656]: Rx Packets with CRC/Align Error Statistic Register
  pub rmon_r_crc_align: RO<u32>,
  /// [660]: Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register
  pub rmon_r_undersize: RO<u32>,
  /// [664]: Rx Packets Greater Than MAX_FL and Good CRC Statistic Register
  pub rmon_r_oversize: RO<u32>,
  /// [668]: Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register
  pub rmon_r_frag: RO<u32>,
  /// [672]: Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register
  pub rmon_r_jab: RO<u32>,
  reserved0x2a4: u32,
  /// [680]: Rx 64-Byte Packets Statistic Register
  pub rmon_r_p64: RO<u32>,
  /// [684]: Rx 65- to 127-Byte Packets Statistic Register
  pub rmon_r_p65to127: RO<u32>,
  /// [688]: Rx 128- to 255-Byte Packets Statistic Register
  pub rmon_r_p128to255: RO<u32>,
  /// [692]: Rx 256- to 511-Byte Packets Statistic Register
  pub rmon_r_p256to511: RO<u32>,
  /// [696]: Rx 512- to 1023-Byte Packets Statistic Register
  pub rmon_r_p512to1023: RO<u32>,
  /// [700]: Rx 1024- to 2047-Byte Packets Statistic Register
  pub rmon_r_p1024to2047: RO<u32>,
  /// [704]: Rx Packets Greater than 2048 Bytes Statistic Register
  pub rmon_r_p_gte2048: RO<u32>,
  /// [708]: Rx Octets Statistic Register
  pub rmon_r_octets: RO<u32>,
  /// [712]: Frames not Counted Correctly Statistic Register
  pub ieee_r_drop: RO<u32>,
  /// [716]: Frames Received OK Statistic Register
  pub ieee_r_frame_ok: RO<u32>,
  /// [720]: Frames Received with CRC Error Statistic Register
  pub ieee_r_crc: RO<u32>,
  /// [724]: Frames Received with Alignment Error Statistic Register
  pub ieee_r_align: RO<u32>,
  /// [728]: Receive FIFO Overflow Count Statistic Register
  pub ieee_r_macerr: RO<u32>,
  /// [732]: Flow Control Pause Frames Received Statistic Register
  pub ieee_r_fdxfc: RO<u32>,
  /// [736]: Octet Count for Frames Received without Error Statistic Register
  pub ieee_r_octets_ok: RO<u32>,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  /// [1024]: Adjustable Timer Control Register
  pub atcr: RW<u32>,
  /// [1028]: Timer Value Register
  pub atvr: RW<u32>,
  /// [1032]: Timer Offset Register
  pub atoff: RW<u32>,
  /// [1036]: Timer Period Register
  pub atper: RW<u32>,
  /// [1040]: Timer Correction Register
  pub atcor: RW<u32>,
  /// [1044]: Time-Stamping Clock Period Register
  pub atinc: RW<u32>,
  /// [1048]: Timestamp of Last Transmitted Frame
  pub atstmp: RO<u32>,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  /// [1540]: Timer Global Status Register
  pub tgsr: RW<u32>,
  /// [1544]: Timer Control Status Register
  pub tcsrs: RW<u32>,
  /// [1548]: Timer Compare Capture Register
  pub tccrs: RW<u32>,
}

pub fn enet() -> *mut ENET {
  1074528256 as *mut ENET
}

#[repr(C)]
/// 12-Bit Digital-to-Analog Converter
pub struct DAC0 {
  /// [0]: DAC Data Low Register
  pub datsl: RW<u32>,
  /// [1]: DAC Data High Register
  pub datsh: RW<u32>,
  reserved0x4: u32,
  reserved0x8: u32,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  /// [32]: DAC Status Register
  pub sr: RW<u32>,
  /// [33]: DAC Control Register
  pub c0: RW<u32>,
  /// [34]: DAC Control Register 1
  pub c1: RW<u32>,
  /// [35]: DAC Control Register 2
  pub c2: RW<u32>,
}

pub fn dac0() -> *mut DAC0 {
  1074577408 as *mut DAC0
}

#[repr(C)]
/// 12-Bit Digital-to-Analog Converter
pub struct DAC1 {
  /// [0]: DAC Data Low Register
  pub datsl: RW<u32>,
  /// [1]: DAC Data High Register
  pub datsh: RW<u32>,
  reserved0x4: u32,
  reserved0x8: u32,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  /// [32]: DAC Status Register
  pub sr: RW<u32>,
  /// [33]: DAC Control Register
  pub c0: RW<u32>,
  /// [34]: DAC Control Register 1
  pub c1: RW<u32>,
  /// [35]: DAC Control Register 2
  pub c2: RW<u32>,
}

pub fn dac1() -> *mut DAC1 {
  1074581504 as *mut DAC1
}

#[repr(C)]
/// General Purpose Input/Output
pub struct GPIOA {
  /// [0]: Port Data Output Register
  pub pdor: RW<u32>,
  /// [4]: Port Set Output Register
  pub psor: WO<u32>,
  /// [8]: Port Clear Output Register
  pub pcor: WO<u32>,
  /// [12]: Port Toggle Output Register
  pub ptor: WO<u32>,
  /// [16]: Port Data Input Register
  pub pdir: RO<u32>,
  /// [20]: Port Data Direction Register
  pub pddr: RW<u32>,
}

pub fn gpioa() -> *mut GPIOA {
  1074786304 as *mut GPIOA
}

#[repr(C)]
/// General Purpose Input/Output
pub struct GPIOB {
  /// [0]: Port Data Output Register
  pub pdor: RW<u32>,
  /// [4]: Port Set Output Register
  pub psor: WO<u32>,
  /// [8]: Port Clear Output Register
  pub pcor: WO<u32>,
  /// [12]: Port Toggle Output Register
  pub ptor: WO<u32>,
  /// [16]: Port Data Input Register
  pub pdir: RO<u32>,
  /// [20]: Port Data Direction Register
  pub pddr: RW<u32>,
}

pub fn gpiob() -> *mut GPIOB {
  1074786368 as *mut GPIOB
}

#[repr(C)]
/// General Purpose Input/Output
pub struct GPIOC {
  /// [0]: Port Data Output Register
  pub pdor: RW<u32>,
  /// [4]: Port Set Output Register
  pub psor: WO<u32>,
  /// [8]: Port Clear Output Register
  pub pcor: WO<u32>,
  /// [12]: Port Toggle Output Register
  pub ptor: WO<u32>,
  /// [16]: Port Data Input Register
  pub pdir: RO<u32>,
  /// [20]: Port Data Direction Register
  pub pddr: RW<u32>,
}

pub fn gpioc() -> *mut GPIOC {
  1074786432 as *mut GPIOC
}

#[repr(C)]
/// General Purpose Input/Output
pub struct GPIOD {
  /// [0]: Port Data Output Register
  pub pdor: RW<u32>,
  /// [4]: Port Set Output Register
  pub psor: WO<u32>,
  /// [8]: Port Clear Output Register
  pub pcor: WO<u32>,
  /// [12]: Port Toggle Output Register
  pub ptor: WO<u32>,
  /// [16]: Port Data Input Register
  pub pdir: RO<u32>,
  /// [20]: Port Data Direction Register
  pub pddr: RW<u32>,
}

pub fn gpiod() -> *mut GPIOD {
  1074786496 as *mut GPIOD
}

#[repr(C)]
/// General Purpose Input/Output
pub struct GPIOE {
  /// [0]: Port Data Output Register
  pub pdor: RW<u32>,
  /// [4]: Port Set Output Register
  pub psor: WO<u32>,
  /// [8]: Port Clear Output Register
  pub pcor: WO<u32>,
  /// [12]: Port Toggle Output Register
  pub ptor: WO<u32>,
  /// [16]: Port Data Input Register
  pub pdir: RO<u32>,
  /// [20]: Port Data Direction Register
  pub pddr: RW<u32>,
}

pub fn gpioe() -> *mut GPIOE {
  1074786560 as *mut GPIOE
}

#[repr(C)]
/// System Control Block
pub struct SystemControl {
  reserved0x0: u32,
  reserved0x4: u32,
  /// [8]: Auxiliary Control Register,
  pub actlr: RW<u32>,
  reserved0xc: u32,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  reserved0x100: u32,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  reserved0x204: u32,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  reserved0x400: u32,
  reserved0x404: u32,
  reserved0x408: u32,
  reserved0x40c: u32,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  reserved0x800: u32,
  reserved0x804: u32,
  reserved0x808: u32,
  reserved0x80c: u32,
  reserved0x810: u32,
  reserved0x814: u32,
  reserved0x818: u32,
  reserved0x81c: u32,
  reserved0x820: u32,
  reserved0x824: u32,
  reserved0x828: u32,
  reserved0x82c: u32,
  reserved0x830: u32,
  reserved0x834: u32,
  reserved0x838: u32,
  reserved0x83c: u32,
  reserved0x840: u32,
  reserved0x844: u32,
  reserved0x848: u32,
  reserved0x84c: u32,
  reserved0x850: u32,
  reserved0x854: u32,
  reserved0x858: u32,
  reserved0x85c: u32,
  reserved0x860: u32,
  reserved0x864: u32,
  reserved0x868: u32,
  reserved0x86c: u32,
  reserved0x870: u32,
  reserved0x874: u32,
  reserved0x878: u32,
  reserved0x87c: u32,
  reserved0x880: u32,
  reserved0x884: u32,
  reserved0x888: u32,
  reserved0x88c: u32,
  reserved0x890: u32,
  reserved0x894: u32,
  reserved0x898: u32,
  reserved0x89c: u32,
  reserved0x8a0: u32,
  reserved0x8a4: u32,
  reserved0x8a8: u32,
  reserved0x8ac: u32,
  reserved0x8b0: u32,
  reserved0x8b4: u32,
  reserved0x8b8: u32,
  reserved0x8bc: u32,
  reserved0x8c0: u32,
  reserved0x8c4: u32,
  reserved0x8c8: u32,
  reserved0x8cc: u32,
  reserved0x8d0: u32,
  reserved0x8d4: u32,
  reserved0x8d8: u32,
  reserved0x8dc: u32,
  reserved0x8e0: u32,
  reserved0x8e4: u32,
  reserved0x8e8: u32,
  reserved0x8ec: u32,
  reserved0x8f0: u32,
  reserved0x8f4: u32,
  reserved0x8f8: u32,
  reserved0x8fc: u32,
  reserved0x900: u32,
  reserved0x904: u32,
  reserved0x908: u32,
  reserved0x90c: u32,
  reserved0x910: u32,
  reserved0x914: u32,
  reserved0x918: u32,
  reserved0x91c: u32,
  reserved0x920: u32,
  reserved0x924: u32,
  reserved0x928: u32,
  reserved0x92c: u32,
  reserved0x930: u32,
  reserved0x934: u32,
  reserved0x938: u32,
  reserved0x93c: u32,
  reserved0x940: u32,
  reserved0x944: u32,
  reserved0x948: u32,
  reserved0x94c: u32,
  reserved0x950: u32,
  reserved0x954: u32,
  reserved0x958: u32,
  reserved0x95c: u32,
  reserved0x960: u32,
  reserved0x964: u32,
  reserved0x968: u32,
  reserved0x96c: u32,
  reserved0x970: u32,
  reserved0x974: u32,
  reserved0x978: u32,
  reserved0x97c: u32,
  reserved0x980: u32,
  reserved0x984: u32,
  reserved0x988: u32,
  reserved0x98c: u32,
  reserved0x990: u32,
  reserved0x994: u32,
  reserved0x998: u32,
  reserved0x99c: u32,
  reserved0x9a0: u32,
  reserved0x9a4: u32,
  reserved0x9a8: u32,
  reserved0x9ac: u32,
  reserved0x9b0: u32,
  reserved0x9b4: u32,
  reserved0x9b8: u32,
  reserved0x9bc: u32,
  reserved0x9c0: u32,
  reserved0x9c4: u32,
  reserved0x9c8: u32,
  reserved0x9cc: u32,
  reserved0x9d0: u32,
  reserved0x9d4: u32,
  reserved0x9d8: u32,
  reserved0x9dc: u32,
  reserved0x9e0: u32,
  reserved0x9e4: u32,
  reserved0x9e8: u32,
  reserved0x9ec: u32,
  reserved0x9f0: u32,
  reserved0x9f4: u32,
  reserved0x9f8: u32,
  reserved0x9fc: u32,
  reserved0xa00: u32,
  reserved0xa04: u32,
  reserved0xa08: u32,
  reserved0xa0c: u32,
  reserved0xa10: u32,
  reserved0xa14: u32,
  reserved0xa18: u32,
  reserved0xa1c: u32,
  reserved0xa20: u32,
  reserved0xa24: u32,
  reserved0xa28: u32,
  reserved0xa2c: u32,
  reserved0xa30: u32,
  reserved0xa34: u32,
  reserved0xa38: u32,
  reserved0xa3c: u32,
  reserved0xa40: u32,
  reserved0xa44: u32,
  reserved0xa48: u32,
  reserved0xa4c: u32,
  reserved0xa50: u32,
  reserved0xa54: u32,
  reserved0xa58: u32,
  reserved0xa5c: u32,
  reserved0xa60: u32,
  reserved0xa64: u32,
  reserved0xa68: u32,
  reserved0xa6c: u32,
  reserved0xa70: u32,
  reserved0xa74: u32,
  reserved0xa78: u32,
  reserved0xa7c: u32,
  reserved0xa80: u32,
  reserved0xa84: u32,
  reserved0xa88: u32,
  reserved0xa8c: u32,
  reserved0xa90: u32,
  reserved0xa94: u32,
  reserved0xa98: u32,
  reserved0xa9c: u32,
  reserved0xaa0: u32,
  reserved0xaa4: u32,
  reserved0xaa8: u32,
  reserved0xaac: u32,
  reserved0xab0: u32,
  reserved0xab4: u32,
  reserved0xab8: u32,
  reserved0xabc: u32,
  reserved0xac0: u32,
  reserved0xac4: u32,
  reserved0xac8: u32,
  reserved0xacc: u32,
  reserved0xad0: u32,
  reserved0xad4: u32,
  reserved0xad8: u32,
  reserved0xadc: u32,
  reserved0xae0: u32,
  reserved0xae4: u32,
  reserved0xae8: u32,
  reserved0xaec: u32,
  reserved0xaf0: u32,
  reserved0xaf4: u32,
  reserved0xaf8: u32,
  reserved0xafc: u32,
  reserved0xb00: u32,
  reserved0xb04: u32,
  reserved0xb08: u32,
  reserved0xb0c: u32,
  reserved0xb10: u32,
  reserved0xb14: u32,
  reserved0xb18: u32,
  reserved0xb1c: u32,
  reserved0xb20: u32,
  reserved0xb24: u32,
  reserved0xb28: u32,
  reserved0xb2c: u32,
  reserved0xb30: u32,
  reserved0xb34: u32,
  reserved0xb38: u32,
  reserved0xb3c: u32,
  reserved0xb40: u32,
  reserved0xb44: u32,
  reserved0xb48: u32,
  reserved0xb4c: u32,
  reserved0xb50: u32,
  reserved0xb54: u32,
  reserved0xb58: u32,
  reserved0xb5c: u32,
  reserved0xb60: u32,
  reserved0xb64: u32,
  reserved0xb68: u32,
  reserved0xb6c: u32,
  reserved0xb70: u32,
  reserved0xb74: u32,
  reserved0xb78: u32,
  reserved0xb7c: u32,
  reserved0xb80: u32,
  reserved0xb84: u32,
  reserved0xb88: u32,
  reserved0xb8c: u32,
  reserved0xb90: u32,
  reserved0xb94: u32,
  reserved0xb98: u32,
  reserved0xb9c: u32,
  reserved0xba0: u32,
  reserved0xba4: u32,
  reserved0xba8: u32,
  reserved0xbac: u32,
  reserved0xbb0: u32,
  reserved0xbb4: u32,
  reserved0xbb8: u32,
  reserved0xbbc: u32,
  reserved0xbc0: u32,
  reserved0xbc4: u32,
  reserved0xbc8: u32,
  reserved0xbcc: u32,
  reserved0xbd0: u32,
  reserved0xbd4: u32,
  reserved0xbd8: u32,
  reserved0xbdc: u32,
  reserved0xbe0: u32,
  reserved0xbe4: u32,
  reserved0xbe8: u32,
  reserved0xbec: u32,
  reserved0xbf0: u32,
  reserved0xbf4: u32,
  reserved0xbf8: u32,
  reserved0xbfc: u32,
  reserved0xc00: u32,
  reserved0xc04: u32,
  reserved0xc08: u32,
  reserved0xc0c: u32,
  reserved0xc10: u32,
  reserved0xc14: u32,
  reserved0xc18: u32,
  reserved0xc1c: u32,
  reserved0xc20: u32,
  reserved0xc24: u32,
  reserved0xc28: u32,
  reserved0xc2c: u32,
  reserved0xc30: u32,
  reserved0xc34: u32,
  reserved0xc38: u32,
  reserved0xc3c: u32,
  reserved0xc40: u32,
  reserved0xc44: u32,
  reserved0xc48: u32,
  reserved0xc4c: u32,
  reserved0xc50: u32,
  reserved0xc54: u32,
  reserved0xc58: u32,
  reserved0xc5c: u32,
  reserved0xc60: u32,
  reserved0xc64: u32,
  reserved0xc68: u32,
  reserved0xc6c: u32,
  reserved0xc70: u32,
  reserved0xc74: u32,
  reserved0xc78: u32,
  reserved0xc7c: u32,
  reserved0xc80: u32,
  reserved0xc84: u32,
  reserved0xc88: u32,
  reserved0xc8c: u32,
  reserved0xc90: u32,
  reserved0xc94: u32,
  reserved0xc98: u32,
  reserved0xc9c: u32,
  reserved0xca0: u32,
  reserved0xca4: u32,
  reserved0xca8: u32,
  reserved0xcac: u32,
  reserved0xcb0: u32,
  reserved0xcb4: u32,
  reserved0xcb8: u32,
  reserved0xcbc: u32,
  reserved0xcc0: u32,
  reserved0xcc4: u32,
  reserved0xcc8: u32,
  reserved0xccc: u32,
  reserved0xcd0: u32,
  reserved0xcd4: u32,
  reserved0xcd8: u32,
  reserved0xcdc: u32,
  reserved0xce0: u32,
  reserved0xce4: u32,
  reserved0xce8: u32,
  reserved0xcec: u32,
  reserved0xcf0: u32,
  reserved0xcf4: u32,
  reserved0xcf8: u32,
  reserved0xcfc: u32,
  /// [3328]: CPUID Base Register
  pub cpuid: RO<u32>,
  /// [3332]: Interrupt Control and State Register
  pub icsr: RW<u32>,
  /// [3336]: Vector Table Offset Register
  pub vtor: RW<u32>,
  /// [3340]: Application Interrupt and Reset Control Register
  pub aircr: RW<u32>,
  /// [3344]: System Control Register
  pub scr: RW<u32>,
  /// [3348]: Configuration and Control Register
  pub ccr: RW<u32>,
  /// [3352]: System Handler Priority Register 1
  pub shpr1: RW<u32>,
  /// [3356]: System Handler Priority Register 2
  pub shpr2: RW<u32>,
  /// [3360]: System Handler Priority Register 3
  pub shpr3: RW<u32>,
  /// [3364]: System Handler Control and State Register
  pub shcsr: RW<u32>,
  /// [3368]: Configurable Fault Status Registers
  pub cfsr: RW<u32>,
  /// [3372]: HardFault Status register
  pub hfsr: RW<u32>,
  /// [3376]: Debug Fault Status Register
  pub dfsr: RW<u32>,
  /// [3380]: MemManage Address Register
  pub mmfar: RW<u32>,
  /// [3384]: BusFault Address Register
  pub bfar: RW<u32>,
  /// [3388]: Auxiliary Fault Status Register
  pub afsr: RW<u32>,
  reserved0xd40: u32,
  reserved0xd44: u32,
  reserved0xd48: u32,
  reserved0xd4c: u32,
  reserved0xd50: u32,
  reserved0xd54: u32,
  reserved0xd58: u32,
  reserved0xd5c: u32,
  reserved0xd60: u32,
  reserved0xd64: u32,
  reserved0xd68: u32,
  reserved0xd6c: u32,
  reserved0xd70: u32,
  reserved0xd74: u32,
  reserved0xd78: u32,
  reserved0xd7c: u32,
  reserved0xd80: u32,
  reserved0xd84: u32,
  /// [3464]: Coprocessor Access Control Register
  pub cpacr: RW<u32>,
  reserved0xd8c: u32,
  reserved0xd90: u32,
  reserved0xd94: u32,
  reserved0xd98: u32,
  reserved0xd9c: u32,
  reserved0xda0: u32,
  reserved0xda4: u32,
  reserved0xda8: u32,
  reserved0xdac: u32,
  reserved0xdb0: u32,
  reserved0xdb4: u32,
  reserved0xdb8: u32,
  reserved0xdbc: u32,
  reserved0xdc0: u32,
  reserved0xdc4: u32,
  reserved0xdc8: u32,
  reserved0xdcc: u32,
  reserved0xdd0: u32,
  reserved0xdd4: u32,
  reserved0xdd8: u32,
  reserved0xddc: u32,
  reserved0xde0: u32,
  reserved0xde4: u32,
  reserved0xde8: u32,
  reserved0xdec: u32,
  reserved0xdf0: u32,
  reserved0xdf4: u32,
  reserved0xdf8: u32,
  reserved0xdfc: u32,
  reserved0xe00: u32,
  reserved0xe04: u32,
  reserved0xe08: u32,
  reserved0xe0c: u32,
  reserved0xe10: u32,
  reserved0xe14: u32,
  reserved0xe18: u32,
  reserved0xe1c: u32,
  reserved0xe20: u32,
  reserved0xe24: u32,
  reserved0xe28: u32,
  reserved0xe2c: u32,
  reserved0xe30: u32,
  reserved0xe34: u32,
  reserved0xe38: u32,
  reserved0xe3c: u32,
  reserved0xe40: u32,
  reserved0xe44: u32,
  reserved0xe48: u32,
  reserved0xe4c: u32,
  reserved0xe50: u32,
  reserved0xe54: u32,
  reserved0xe58: u32,
  reserved0xe5c: u32,
  reserved0xe60: u32,
  reserved0xe64: u32,
  reserved0xe68: u32,
  reserved0xe6c: u32,
  reserved0xe70: u32,
  reserved0xe74: u32,
  reserved0xe78: u32,
  reserved0xe7c: u32,
  reserved0xe80: u32,
  reserved0xe84: u32,
  reserved0xe88: u32,
  reserved0xe8c: u32,
  reserved0xe90: u32,
  reserved0xe94: u32,
  reserved0xe98: u32,
  reserved0xe9c: u32,
  reserved0xea0: u32,
  reserved0xea4: u32,
  reserved0xea8: u32,
  reserved0xeac: u32,
  reserved0xeb0: u32,
  reserved0xeb4: u32,
  reserved0xeb8: u32,
  reserved0xebc: u32,
  reserved0xec0: u32,
  reserved0xec4: u32,
  reserved0xec8: u32,
  reserved0xecc: u32,
  reserved0xed0: u32,
  reserved0xed4: u32,
  reserved0xed8: u32,
  reserved0xedc: u32,
  reserved0xee0: u32,
  reserved0xee4: u32,
  reserved0xee8: u32,
  reserved0xeec: u32,
  reserved0xef0: u32,
  reserved0xef4: u32,
  reserved0xef8: u32,
  reserved0xefc: u32,
  reserved0xf00: u32,
  reserved0xf04: u32,
  reserved0xf08: u32,
  reserved0xf0c: u32,
  reserved0xf10: u32,
  reserved0xf14: u32,
  reserved0xf18: u32,
  reserved0xf1c: u32,
  reserved0xf20: u32,
  reserved0xf24: u32,
  reserved0xf28: u32,
  reserved0xf2c: u32,
  reserved0xf30: u32,
  /// [3892]: Floating-point Context Control Register
  pub fpccr: RW<u32>,
  /// [3896]: Floating-point Context Address Register
  pub fpcar: RW<u32>,
  /// [3900]: Floating-point Default Status Control Register
  pub fpdscr: RW<u32>,
}

pub fn systemcontrol() -> *mut SystemControl {
  3758153728 as *mut SystemControl
}

#[repr(C)]
/// System timer
pub struct SysTick {
  /// [0]: SysTick Control and Status Register
  pub csr: RW<u32>,
  /// [4]: SysTick Reload Value Register
  pub rvr: RW<u32>,
  /// [8]: SysTick Current Value Register
  pub cvr: RW<u32>,
  /// [12]: SysTick Calibration Value Register
  pub calib: RO<u32>,
}

pub fn systick() -> *mut SysTick {
  3758153744 as *mut SysTick
}

#[repr(C)]
/// Nested Vectored Interrupt Controller
pub struct NVIC {
  /// [0]: Interrupt Set Enable Register n
  pub nviciser0: RW<u32>,
  /// [4]: Interrupt Set Enable Register n
  pub nviciser1: RW<u32>,
  /// [8]: Interrupt Set Enable Register n
  pub nviciser2: RW<u32>,
  /// [12]: Interrupt Set Enable Register n
  pub nviciser3: RW<u32>,
  reserved0x10: u32,
  reserved0x14: u32,
  reserved0x18: u32,
  reserved0x1c: u32,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  reserved0x30: u32,
  reserved0x34: u32,
  reserved0x38: u32,
  reserved0x3c: u32,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  /// [128]: Interrupt Clear Enable Register n
  pub nvicicer0: RW<u32>,
  /// [132]: Interrupt Clear Enable Register n
  pub nvicicer1: RW<u32>,
  /// [136]: Interrupt Clear Enable Register n
  pub nvicicer2: RW<u32>,
  /// [140]: Interrupt Clear Enable Register n
  pub nvicicer3: RW<u32>,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  /// [256]: Interrupt Set Pending Register n
  pub nvicispr0: RW<u32>,
  /// [260]: Interrupt Set Pending Register n
  pub nvicispr1: RW<u32>,
  /// [264]: Interrupt Set Pending Register n
  pub nvicispr2: RW<u32>,
  /// [268]: Interrupt Set Pending Register n
  pub nvicispr3: RW<u32>,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  /// [384]: Interrupt Clear Pending Register n
  pub nvicicpr0: RW<u32>,
  /// [388]: Interrupt Clear Pending Register n
  pub nvicicpr1: RW<u32>,
  /// [392]: Interrupt Clear Pending Register n
  pub nvicicpr2: RW<u32>,
  /// [396]: Interrupt Clear Pending Register n
  pub nvicicpr3: RW<u32>,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  /// [512]: Interrupt Active bit Register n
  pub nviciabr0: RW<u32>,
  /// [516]: Interrupt Active bit Register n
  pub nviciabr1: RW<u32>,
  /// [520]: Interrupt Active bit Register n
  pub nviciabr2: RW<u32>,
  /// [524]: Interrupt Active bit Register n
  pub nviciabr3: RW<u32>,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  /// [768]: Interrupt Priority Register n
  pub nvicip0: RW<u32>,
  /// [769]: Interrupt Priority Register n
  pub nvicip1: RW<u32>,
  /// [770]: Interrupt Priority Register n
  pub nvicip2: RW<u32>,
  /// [771]: Interrupt Priority Register n
  pub nvicip3: RW<u32>,
  /// [772]: Interrupt Priority Register n
  pub nvicip4: RW<u32>,
  /// [773]: Interrupt Priority Register n
  pub nvicip5: RW<u32>,
  /// [774]: Interrupt Priority Register n
  pub nvicip6: RW<u32>,
  /// [775]: Interrupt Priority Register n
  pub nvicip7: RW<u32>,
  /// [776]: Interrupt Priority Register n
  pub nvicip8: RW<u32>,
  /// [777]: Interrupt Priority Register n
  pub nvicip9: RW<u32>,
  /// [778]: Interrupt Priority Register n
  pub nvicip10: RW<u32>,
  /// [779]: Interrupt Priority Register n
  pub nvicip11: RW<u32>,
  /// [780]: Interrupt Priority Register n
  pub nvicip12: RW<u32>,
  /// [781]: Interrupt Priority Register n
  pub nvicip13: RW<u32>,
  /// [782]: Interrupt Priority Register n
  pub nvicip14: RW<u32>,
  /// [783]: Interrupt Priority Register n
  pub nvicip15: RW<u32>,
  /// [784]: Interrupt Priority Register n
  pub nvicip16: RW<u32>,
  /// [785]: Interrupt Priority Register n
  pub nvicip17: RW<u32>,
  /// [786]: Interrupt Priority Register n
  pub nvicip18: RW<u32>,
  /// [787]: Interrupt Priority Register n
  pub nvicip19: RW<u32>,
  /// [788]: Interrupt Priority Register n
  pub nvicip20: RW<u32>,
  /// [789]: Interrupt Priority Register n
  pub nvicip21: RW<u32>,
  /// [790]: Interrupt Priority Register n
  pub nvicip22: RW<u32>,
  /// [791]: Interrupt Priority Register n
  pub nvicip23: RW<u32>,
  /// [792]: Interrupt Priority Register n
  pub nvicip24: RW<u32>,
  /// [793]: Interrupt Priority Register n
  pub nvicip25: RW<u32>,
  /// [794]: Interrupt Priority Register n
  pub nvicip26: RW<u32>,
  /// [795]: Interrupt Priority Register n
  pub nvicip27: RW<u32>,
  /// [796]: Interrupt Priority Register n
  pub nvicip28: RW<u32>,
  /// [797]: Interrupt Priority Register n
  pub nvicip29: RW<u32>,
  /// [798]: Interrupt Priority Register n
  pub nvicip30: RW<u32>,
  /// [799]: Interrupt Priority Register n
  pub nvicip31: RW<u32>,
  /// [800]: Interrupt Priority Register n
  pub nvicip32: RW<u32>,
  /// [801]: Interrupt Priority Register n
  pub nvicip33: RW<u32>,
  /// [802]: Interrupt Priority Register n
  pub nvicip34: RW<u32>,
  /// [803]: Interrupt Priority Register n
  pub nvicip35: RW<u32>,
  /// [804]: Interrupt Priority Register n
  pub nvicip36: RW<u32>,
  /// [805]: Interrupt Priority Register n
  pub nvicip37: RW<u32>,
  /// [806]: Interrupt Priority Register n
  pub nvicip38: RW<u32>,
  /// [807]: Interrupt Priority Register n
  pub nvicip39: RW<u32>,
  /// [808]: Interrupt Priority Register n
  pub nvicip40: RW<u32>,
  /// [809]: Interrupt Priority Register n
  pub nvicip41: RW<u32>,
  /// [810]: Interrupt Priority Register n
  pub nvicip42: RW<u32>,
  /// [811]: Interrupt Priority Register n
  pub nvicip43: RW<u32>,
  /// [812]: Interrupt Priority Register n
  pub nvicip44: RW<u32>,
  /// [813]: Interrupt Priority Register n
  pub nvicip45: RW<u32>,
  /// [814]: Interrupt Priority Register n
  pub nvicip46: RW<u32>,
  /// [815]: Interrupt Priority Register n
  pub nvicip47: RW<u32>,
  /// [816]: Interrupt Priority Register n
  pub nvicip48: RW<u32>,
  /// [817]: Interrupt Priority Register n
  pub nvicip49: RW<u32>,
  /// [818]: Interrupt Priority Register n
  pub nvicip50: RW<u32>,
  /// [819]: Interrupt Priority Register n
  pub nvicip51: RW<u32>,
  /// [820]: Interrupt Priority Register n
  pub nvicip52: RW<u32>,
  /// [821]: Interrupt Priority Register n
  pub nvicip53: RW<u32>,
  /// [822]: Interrupt Priority Register n
  pub nvicip54: RW<u32>,
  /// [823]: Interrupt Priority Register n
  pub nvicip55: RW<u32>,
  /// [824]: Interrupt Priority Register n
  pub nvicip56: RW<u32>,
  /// [825]: Interrupt Priority Register n
  pub nvicip57: RW<u32>,
  /// [826]: Interrupt Priority Register n
  pub nvicip58: RW<u32>,
  /// [827]: Interrupt Priority Register n
  pub nvicip59: RW<u32>,
  /// [828]: Interrupt Priority Register n
  pub nvicip60: RW<u32>,
  /// [829]: Interrupt Priority Register n
  pub nvicip61: RW<u32>,
  /// [830]: Interrupt Priority Register n
  pub nvicip62: RW<u32>,
  /// [831]: Interrupt Priority Register n
  pub nvicip63: RW<u32>,
  /// [832]: Interrupt Priority Register n
  pub nvicip64: RW<u32>,
  /// [833]: Interrupt Priority Register n
  pub nvicip65: RW<u32>,
  /// [834]: Interrupt Priority Register n
  pub nvicip66: RW<u32>,
  /// [835]: Interrupt Priority Register n
  pub nvicip67: RW<u32>,
  /// [836]: Interrupt Priority Register n
  pub nvicip68: RW<u32>,
  /// [837]: Interrupt Priority Register n
  pub nvicip69: RW<u32>,
  /// [838]: Interrupt Priority Register n
  pub nvicip70: RW<u32>,
  /// [839]: Interrupt Priority Register n
  pub nvicip71: RW<u32>,
  /// [840]: Interrupt Priority Register n
  pub nvicip72: RW<u32>,
  /// [841]: Interrupt Priority Register n
  pub nvicip73: RW<u32>,
  /// [842]: Interrupt Priority Register n
  pub nvicip74: RW<u32>,
  /// [843]: Interrupt Priority Register n
  pub nvicip75: RW<u32>,
  /// [844]: Interrupt Priority Register n
  pub nvicip76: RW<u32>,
  /// [845]: Interrupt Priority Register n
  pub nvicip77: RW<u32>,
  /// [846]: Interrupt Priority Register n
  pub nvicip78: RW<u32>,
  /// [847]: Interrupt Priority Register n
  pub nvicip79: RW<u32>,
  /// [848]: Interrupt Priority Register n
  pub nvicip80: RW<u32>,
  /// [849]: Interrupt Priority Register n
  pub nvicip81: RW<u32>,
  /// [850]: Interrupt Priority Register n
  pub nvicip82: RW<u32>,
  /// [851]: Interrupt Priority Register n
  pub nvicip83: RW<u32>,
  /// [852]: Interrupt Priority Register n
  pub nvicip84: RW<u32>,
  /// [853]: Interrupt Priority Register n
  pub nvicip85: RW<u32>,
  /// [854]: Interrupt Priority Register n
  pub nvicip86: RW<u32>,
  /// [855]: Interrupt Priority Register n
  pub nvicip87: RW<u32>,
  /// [856]: Interrupt Priority Register n
  pub nvicip88: RW<u32>,
  /// [857]: Interrupt Priority Register n
  pub nvicip89: RW<u32>,
  /// [858]: Interrupt Priority Register n
  pub nvicip90: RW<u32>,
  /// [859]: Interrupt Priority Register n
  pub nvicip91: RW<u32>,
  /// [860]: Interrupt Priority Register n
  pub nvicip92: RW<u32>,
  /// [861]: Interrupt Priority Register n
  pub nvicip93: RW<u32>,
  /// [862]: Interrupt Priority Register n
  pub nvicip94: RW<u32>,
  /// [863]: Interrupt Priority Register n
  pub nvicip95: RW<u32>,
  /// [864]: Interrupt Priority Register n
  pub nvicip96: RW<u32>,
  /// [865]: Interrupt Priority Register n
  pub nvicip97: RW<u32>,
  /// [866]: Interrupt Priority Register n
  pub nvicip98: RW<u32>,
  /// [867]: Interrupt Priority Register n
  pub nvicip99: RW<u32>,
  /// [868]: Interrupt Priority Register n
  pub nvicip100: RW<u32>,
  /// [869]: Interrupt Priority Register n
  pub nvicip101: RW<u32>,
  /// [870]: Interrupt Priority Register n
  pub nvicip102: RW<u32>,
  /// [871]: Interrupt Priority Register n
  pub nvicip103: RW<u32>,
  /// [872]: Interrupt Priority Register n
  pub nvicip104: RW<u32>,
  /// [873]: Interrupt Priority Register n
  pub nvicip105: RW<u32>,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  reserved0x400: u32,
  reserved0x404: u32,
  reserved0x408: u32,
  reserved0x40c: u32,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  reserved0x800: u32,
  reserved0x804: u32,
  reserved0x808: u32,
  reserved0x80c: u32,
  reserved0x810: u32,
  reserved0x814: u32,
  reserved0x818: u32,
  reserved0x81c: u32,
  reserved0x820: u32,
  reserved0x824: u32,
  reserved0x828: u32,
  reserved0x82c: u32,
  reserved0x830: u32,
  reserved0x834: u32,
  reserved0x838: u32,
  reserved0x83c: u32,
  reserved0x840: u32,
  reserved0x844: u32,
  reserved0x848: u32,
  reserved0x84c: u32,
  reserved0x850: u32,
  reserved0x854: u32,
  reserved0x858: u32,
  reserved0x85c: u32,
  reserved0x860: u32,
  reserved0x864: u32,
  reserved0x868: u32,
  reserved0x86c: u32,
  reserved0x870: u32,
  reserved0x874: u32,
  reserved0x878: u32,
  reserved0x87c: u32,
  reserved0x880: u32,
  reserved0x884: u32,
  reserved0x888: u32,
  reserved0x88c: u32,
  reserved0x890: u32,
  reserved0x894: u32,
  reserved0x898: u32,
  reserved0x89c: u32,
  reserved0x8a0: u32,
  reserved0x8a4: u32,
  reserved0x8a8: u32,
  reserved0x8ac: u32,
  reserved0x8b0: u32,
  reserved0x8b4: u32,
  reserved0x8b8: u32,
  reserved0x8bc: u32,
  reserved0x8c0: u32,
  reserved0x8c4: u32,
  reserved0x8c8: u32,
  reserved0x8cc: u32,
  reserved0x8d0: u32,
  reserved0x8d4: u32,
  reserved0x8d8: u32,
  reserved0x8dc: u32,
  reserved0x8e0: u32,
  reserved0x8e4: u32,
  reserved0x8e8: u32,
  reserved0x8ec: u32,
  reserved0x8f0: u32,
  reserved0x8f4: u32,
  reserved0x8f8: u32,
  reserved0x8fc: u32,
  reserved0x900: u32,
  reserved0x904: u32,
  reserved0x908: u32,
  reserved0x90c: u32,
  reserved0x910: u32,
  reserved0x914: u32,
  reserved0x918: u32,
  reserved0x91c: u32,
  reserved0x920: u32,
  reserved0x924: u32,
  reserved0x928: u32,
  reserved0x92c: u32,
  reserved0x930: u32,
  reserved0x934: u32,
  reserved0x938: u32,
  reserved0x93c: u32,
  reserved0x940: u32,
  reserved0x944: u32,
  reserved0x948: u32,
  reserved0x94c: u32,
  reserved0x950: u32,
  reserved0x954: u32,
  reserved0x958: u32,
  reserved0x95c: u32,
  reserved0x960: u32,
  reserved0x964: u32,
  reserved0x968: u32,
  reserved0x96c: u32,
  reserved0x970: u32,
  reserved0x974: u32,
  reserved0x978: u32,
  reserved0x97c: u32,
  reserved0x980: u32,
  reserved0x984: u32,
  reserved0x988: u32,
  reserved0x98c: u32,
  reserved0x990: u32,
  reserved0x994: u32,
  reserved0x998: u32,
  reserved0x99c: u32,
  reserved0x9a0: u32,
  reserved0x9a4: u32,
  reserved0x9a8: u32,
  reserved0x9ac: u32,
  reserved0x9b0: u32,
  reserved0x9b4: u32,
  reserved0x9b8: u32,
  reserved0x9bc: u32,
  reserved0x9c0: u32,
  reserved0x9c4: u32,
  reserved0x9c8: u32,
  reserved0x9cc: u32,
  reserved0x9d0: u32,
  reserved0x9d4: u32,
  reserved0x9d8: u32,
  reserved0x9dc: u32,
  reserved0x9e0: u32,
  reserved0x9e4: u32,
  reserved0x9e8: u32,
  reserved0x9ec: u32,
  reserved0x9f0: u32,
  reserved0x9f4: u32,
  reserved0x9f8: u32,
  reserved0x9fc: u32,
  reserved0xa00: u32,
  reserved0xa04: u32,
  reserved0xa08: u32,
  reserved0xa0c: u32,
  reserved0xa10: u32,
  reserved0xa14: u32,
  reserved0xa18: u32,
  reserved0xa1c: u32,
  reserved0xa20: u32,
  reserved0xa24: u32,
  reserved0xa28: u32,
  reserved0xa2c: u32,
  reserved0xa30: u32,
  reserved0xa34: u32,
  reserved0xa38: u32,
  reserved0xa3c: u32,
  reserved0xa40: u32,
  reserved0xa44: u32,
  reserved0xa48: u32,
  reserved0xa4c: u32,
  reserved0xa50: u32,
  reserved0xa54: u32,
  reserved0xa58: u32,
  reserved0xa5c: u32,
  reserved0xa60: u32,
  reserved0xa64: u32,
  reserved0xa68: u32,
  reserved0xa6c: u32,
  reserved0xa70: u32,
  reserved0xa74: u32,
  reserved0xa78: u32,
  reserved0xa7c: u32,
  reserved0xa80: u32,
  reserved0xa84: u32,
  reserved0xa88: u32,
  reserved0xa8c: u32,
  reserved0xa90: u32,
  reserved0xa94: u32,
  reserved0xa98: u32,
  reserved0xa9c: u32,
  reserved0xaa0: u32,
  reserved0xaa4: u32,
  reserved0xaa8: u32,
  reserved0xaac: u32,
  reserved0xab0: u32,
  reserved0xab4: u32,
  reserved0xab8: u32,
  reserved0xabc: u32,
  reserved0xac0: u32,
  reserved0xac4: u32,
  reserved0xac8: u32,
  reserved0xacc: u32,
  reserved0xad0: u32,
  reserved0xad4: u32,
  reserved0xad8: u32,
  reserved0xadc: u32,
  reserved0xae0: u32,
  reserved0xae4: u32,
  reserved0xae8: u32,
  reserved0xaec: u32,
  reserved0xaf0: u32,
  reserved0xaf4: u32,
  reserved0xaf8: u32,
  reserved0xafc: u32,
  reserved0xb00: u32,
  reserved0xb04: u32,
  reserved0xb08: u32,
  reserved0xb0c: u32,
  reserved0xb10: u32,
  reserved0xb14: u32,
  reserved0xb18: u32,
  reserved0xb1c: u32,
  reserved0xb20: u32,
  reserved0xb24: u32,
  reserved0xb28: u32,
  reserved0xb2c: u32,
  reserved0xb30: u32,
  reserved0xb34: u32,
  reserved0xb38: u32,
  reserved0xb3c: u32,
  reserved0xb40: u32,
  reserved0xb44: u32,
  reserved0xb48: u32,
  reserved0xb4c: u32,
  reserved0xb50: u32,
  reserved0xb54: u32,
  reserved0xb58: u32,
  reserved0xb5c: u32,
  reserved0xb60: u32,
  reserved0xb64: u32,
  reserved0xb68: u32,
  reserved0xb6c: u32,
  reserved0xb70: u32,
  reserved0xb74: u32,
  reserved0xb78: u32,
  reserved0xb7c: u32,
  reserved0xb80: u32,
  reserved0xb84: u32,
  reserved0xb88: u32,
  reserved0xb8c: u32,
  reserved0xb90: u32,
  reserved0xb94: u32,
  reserved0xb98: u32,
  reserved0xb9c: u32,
  reserved0xba0: u32,
  reserved0xba4: u32,
  reserved0xba8: u32,
  reserved0xbac: u32,
  reserved0xbb0: u32,
  reserved0xbb4: u32,
  reserved0xbb8: u32,
  reserved0xbbc: u32,
  reserved0xbc0: u32,
  reserved0xbc4: u32,
  reserved0xbc8: u32,
  reserved0xbcc: u32,
  reserved0xbd0: u32,
  reserved0xbd4: u32,
  reserved0xbd8: u32,
  reserved0xbdc: u32,
  reserved0xbe0: u32,
  reserved0xbe4: u32,
  reserved0xbe8: u32,
  reserved0xbec: u32,
  reserved0xbf0: u32,
  reserved0xbf4: u32,
  reserved0xbf8: u32,
  reserved0xbfc: u32,
  reserved0xc00: u32,
  reserved0xc04: u32,
  reserved0xc08: u32,
  reserved0xc0c: u32,
  reserved0xc10: u32,
  reserved0xc14: u32,
  reserved0xc18: u32,
  reserved0xc1c: u32,
  reserved0xc20: u32,
  reserved0xc24: u32,
  reserved0xc28: u32,
  reserved0xc2c: u32,
  reserved0xc30: u32,
  reserved0xc34: u32,
  reserved0xc38: u32,
  reserved0xc3c: u32,
  reserved0xc40: u32,
  reserved0xc44: u32,
  reserved0xc48: u32,
  reserved0xc4c: u32,
  reserved0xc50: u32,
  reserved0xc54: u32,
  reserved0xc58: u32,
  reserved0xc5c: u32,
  reserved0xc60: u32,
  reserved0xc64: u32,
  reserved0xc68: u32,
  reserved0xc6c: u32,
  reserved0xc70: u32,
  reserved0xc74: u32,
  reserved0xc78: u32,
  reserved0xc7c: u32,
  reserved0xc80: u32,
  reserved0xc84: u32,
  reserved0xc88: u32,
  reserved0xc8c: u32,
  reserved0xc90: u32,
  reserved0xc94: u32,
  reserved0xc98: u32,
  reserved0xc9c: u32,
  reserved0xca0: u32,
  reserved0xca4: u32,
  reserved0xca8: u32,
  reserved0xcac: u32,
  reserved0xcb0: u32,
  reserved0xcb4: u32,
  reserved0xcb8: u32,
  reserved0xcbc: u32,
  reserved0xcc0: u32,
  reserved0xcc4: u32,
  reserved0xcc8: u32,
  reserved0xccc: u32,
  reserved0xcd0: u32,
  reserved0xcd4: u32,
  reserved0xcd8: u32,
  reserved0xcdc: u32,
  reserved0xce0: u32,
  reserved0xce4: u32,
  reserved0xce8: u32,
  reserved0xcec: u32,
  reserved0xcf0: u32,
  reserved0xcf4: u32,
  reserved0xcf8: u32,
  reserved0xcfc: u32,
  reserved0xd00: u32,
  reserved0xd04: u32,
  reserved0xd08: u32,
  reserved0xd0c: u32,
  reserved0xd10: u32,
  reserved0xd14: u32,
  reserved0xd18: u32,
  reserved0xd1c: u32,
  reserved0xd20: u32,
  reserved0xd24: u32,
  reserved0xd28: u32,
  reserved0xd2c: u32,
  reserved0xd30: u32,
  reserved0xd34: u32,
  reserved0xd38: u32,
  reserved0xd3c: u32,
  reserved0xd40: u32,
  reserved0xd44: u32,
  reserved0xd48: u32,
  reserved0xd4c: u32,
  reserved0xd50: u32,
  reserved0xd54: u32,
  reserved0xd58: u32,
  reserved0xd5c: u32,
  reserved0xd60: u32,
  reserved0xd64: u32,
  reserved0xd68: u32,
  reserved0xd6c: u32,
  reserved0xd70: u32,
  reserved0xd74: u32,
  reserved0xd78: u32,
  reserved0xd7c: u32,
  reserved0xd80: u32,
  reserved0xd84: u32,
  reserved0xd88: u32,
  reserved0xd8c: u32,
  reserved0xd90: u32,
  reserved0xd94: u32,
  reserved0xd98: u32,
  reserved0xd9c: u32,
  reserved0xda0: u32,
  reserved0xda4: u32,
  reserved0xda8: u32,
  reserved0xdac: u32,
  reserved0xdb0: u32,
  reserved0xdb4: u32,
  reserved0xdb8: u32,
  reserved0xdbc: u32,
  reserved0xdc0: u32,
  reserved0xdc4: u32,
  reserved0xdc8: u32,
  reserved0xdcc: u32,
  reserved0xdd0: u32,
  reserved0xdd4: u32,
  reserved0xdd8: u32,
  reserved0xddc: u32,
  reserved0xde0: u32,
  reserved0xde4: u32,
  reserved0xde8: u32,
  reserved0xdec: u32,
  reserved0xdf0: u32,
  reserved0xdf4: u32,
  reserved0xdf8: u32,
  reserved0xdfc: u32,
  /// [3584]: Software Trigger Interrupt Register
  pub nvicstir: RW<u32>,
}

pub fn nvic() -> *mut NVIC {
  3758153984 as *mut NVIC
}

#[repr(C)]
/// Core Platform Miscellaneous Control Module
pub struct MCM {
  reserved0x0: u32,
  reserved0x4: u32,
  /// [8]: Crossbar Switch (AXBS) Slave Configuration
  pub plasc: RO<u32>,
  /// [10]: Crossbar Switch (AXBS) Master Configuration
  pub plamc: RO<u32>,
  /// [12]: Control Register
  pub cr: RW<u32>,
  /// [16]: Interrupt Status Register
  pub iscr: RW<u32>,
  /// [20]: ETB Counter Control register
  pub etbcc: RW<u32>,
  /// [24]: ETB Reload register
  pub etbrl: RW<u32>,
  /// [28]: ETB Counter Value register
  pub etbcnt: RO<u32>,
  reserved0x20: u32,
  reserved0x24: u32,
  reserved0x28: u32,
  reserved0x2c: u32,
  /// [48]: Process ID register
  pub pid: RW<u32>,
}

pub fn mcm() -> *mut MCM {
  3758620672 as *mut MCM
}

#[repr(C)]
/// Memory Mapped Cryptographic Acceleration Unit (MMCAU)
pub struct CAU {
  /// [0]: Direct access register 0
  pub cau_direct0: WO<u32>,
  /// [4]: Direct access register 1
  pub cau_direct1: WO<u32>,
  /// [8]: Direct access register 2
  pub cau_direct2: WO<u32>,
  /// [12]: Direct access register 3
  pub cau_direct3: WO<u32>,
  /// [16]: Direct access register 4
  pub cau_direct4: WO<u32>,
  /// [20]: Direct access register 5
  pub cau_direct5: WO<u32>,
  /// [24]: Direct access register 6
  pub cau_direct6: WO<u32>,
  /// [28]: Direct access register 7
  pub cau_direct7: WO<u32>,
  /// [32]: Direct access register 8
  pub cau_direct8: WO<u32>,
  /// [36]: Direct access register 9
  pub cau_direct9: WO<u32>,
  /// [40]: Direct access register 10
  pub cau_direct10: WO<u32>,
  /// [44]: Direct access register 11
  pub cau_direct11: WO<u32>,
  /// [48]: Direct access register 12
  pub cau_direct12: WO<u32>,
  /// [52]: Direct access register 13
  pub cau_direct13: WO<u32>,
  /// [56]: Direct access register 14
  pub cau_direct14: WO<u32>,
  /// [60]: Direct access register 15
  pub cau_direct15: WO<u32>,
  reserved0x40: u32,
  reserved0x44: u32,
  reserved0x48: u32,
  reserved0x4c: u32,
  reserved0x50: u32,
  reserved0x54: u32,
  reserved0x58: u32,
  reserved0x5c: u32,
  reserved0x60: u32,
  reserved0x64: u32,
  reserved0x68: u32,
  reserved0x6c: u32,
  reserved0x70: u32,
  reserved0x74: u32,
  reserved0x78: u32,
  reserved0x7c: u32,
  reserved0x80: u32,
  reserved0x84: u32,
  reserved0x88: u32,
  reserved0x8c: u32,
  reserved0x90: u32,
  reserved0x94: u32,
  reserved0x98: u32,
  reserved0x9c: u32,
  reserved0xa0: u32,
  reserved0xa4: u32,
  reserved0xa8: u32,
  reserved0xac: u32,
  reserved0xb0: u32,
  reserved0xb4: u32,
  reserved0xb8: u32,
  reserved0xbc: u32,
  reserved0xc0: u32,
  reserved0xc4: u32,
  reserved0xc8: u32,
  reserved0xcc: u32,
  reserved0xd0: u32,
  reserved0xd4: u32,
  reserved0xd8: u32,
  reserved0xdc: u32,
  reserved0xe0: u32,
  reserved0xe4: u32,
  reserved0xe8: u32,
  reserved0xec: u32,
  reserved0xf0: u32,
  reserved0xf4: u32,
  reserved0xf8: u32,
  reserved0xfc: u32,
  reserved0x100: u32,
  reserved0x104: u32,
  reserved0x108: u32,
  reserved0x10c: u32,
  reserved0x110: u32,
  reserved0x114: u32,
  reserved0x118: u32,
  reserved0x11c: u32,
  reserved0x120: u32,
  reserved0x124: u32,
  reserved0x128: u32,
  reserved0x12c: u32,
  reserved0x130: u32,
  reserved0x134: u32,
  reserved0x138: u32,
  reserved0x13c: u32,
  reserved0x140: u32,
  reserved0x144: u32,
  reserved0x148: u32,
  reserved0x14c: u32,
  reserved0x150: u32,
  reserved0x154: u32,
  reserved0x158: u32,
  reserved0x15c: u32,
  reserved0x160: u32,
  reserved0x164: u32,
  reserved0x168: u32,
  reserved0x16c: u32,
  reserved0x170: u32,
  reserved0x174: u32,
  reserved0x178: u32,
  reserved0x17c: u32,
  reserved0x180: u32,
  reserved0x184: u32,
  reserved0x188: u32,
  reserved0x18c: u32,
  reserved0x190: u32,
  reserved0x194: u32,
  reserved0x198: u32,
  reserved0x19c: u32,
  reserved0x1a0: u32,
  reserved0x1a4: u32,
  reserved0x1a8: u32,
  reserved0x1ac: u32,
  reserved0x1b0: u32,
  reserved0x1b4: u32,
  reserved0x1b8: u32,
  reserved0x1bc: u32,
  reserved0x1c0: u32,
  reserved0x1c4: u32,
  reserved0x1c8: u32,
  reserved0x1cc: u32,
  reserved0x1d0: u32,
  reserved0x1d4: u32,
  reserved0x1d8: u32,
  reserved0x1dc: u32,
  reserved0x1e0: u32,
  reserved0x1e4: u32,
  reserved0x1e8: u32,
  reserved0x1ec: u32,
  reserved0x1f0: u32,
  reserved0x1f4: u32,
  reserved0x1f8: u32,
  reserved0x1fc: u32,
  reserved0x200: u32,
  reserved0x204: u32,
  reserved0x208: u32,
  reserved0x20c: u32,
  reserved0x210: u32,
  reserved0x214: u32,
  reserved0x218: u32,
  reserved0x21c: u32,
  reserved0x220: u32,
  reserved0x224: u32,
  reserved0x228: u32,
  reserved0x22c: u32,
  reserved0x230: u32,
  reserved0x234: u32,
  reserved0x238: u32,
  reserved0x23c: u32,
  reserved0x240: u32,
  reserved0x244: u32,
  reserved0x248: u32,
  reserved0x24c: u32,
  reserved0x250: u32,
  reserved0x254: u32,
  reserved0x258: u32,
  reserved0x25c: u32,
  reserved0x260: u32,
  reserved0x264: u32,
  reserved0x268: u32,
  reserved0x26c: u32,
  reserved0x270: u32,
  reserved0x274: u32,
  reserved0x278: u32,
  reserved0x27c: u32,
  reserved0x280: u32,
  reserved0x284: u32,
  reserved0x288: u32,
  reserved0x28c: u32,
  reserved0x290: u32,
  reserved0x294: u32,
  reserved0x298: u32,
  reserved0x29c: u32,
  reserved0x2a0: u32,
  reserved0x2a4: u32,
  reserved0x2a8: u32,
  reserved0x2ac: u32,
  reserved0x2b0: u32,
  reserved0x2b4: u32,
  reserved0x2b8: u32,
  reserved0x2bc: u32,
  reserved0x2c0: u32,
  reserved0x2c4: u32,
  reserved0x2c8: u32,
  reserved0x2cc: u32,
  reserved0x2d0: u32,
  reserved0x2d4: u32,
  reserved0x2d8: u32,
  reserved0x2dc: u32,
  reserved0x2e0: u32,
  reserved0x2e4: u32,
  reserved0x2e8: u32,
  reserved0x2ec: u32,
  reserved0x2f0: u32,
  reserved0x2f4: u32,
  reserved0x2f8: u32,
  reserved0x2fc: u32,
  reserved0x300: u32,
  reserved0x304: u32,
  reserved0x308: u32,
  reserved0x30c: u32,
  reserved0x310: u32,
  reserved0x314: u32,
  reserved0x318: u32,
  reserved0x31c: u32,
  reserved0x320: u32,
  reserved0x324: u32,
  reserved0x328: u32,
  reserved0x32c: u32,
  reserved0x330: u32,
  reserved0x334: u32,
  reserved0x338: u32,
  reserved0x33c: u32,
  reserved0x340: u32,
  reserved0x344: u32,
  reserved0x348: u32,
  reserved0x34c: u32,
  reserved0x350: u32,
  reserved0x354: u32,
  reserved0x358: u32,
  reserved0x35c: u32,
  reserved0x360: u32,
  reserved0x364: u32,
  reserved0x368: u32,
  reserved0x36c: u32,
  reserved0x370: u32,
  reserved0x374: u32,
  reserved0x378: u32,
  reserved0x37c: u32,
  reserved0x380: u32,
  reserved0x384: u32,
  reserved0x388: u32,
  reserved0x38c: u32,
  reserved0x390: u32,
  reserved0x394: u32,
  reserved0x398: u32,
  reserved0x39c: u32,
  reserved0x3a0: u32,
  reserved0x3a4: u32,
  reserved0x3a8: u32,
  reserved0x3ac: u32,
  reserved0x3b0: u32,
  reserved0x3b4: u32,
  reserved0x3b8: u32,
  reserved0x3bc: u32,
  reserved0x3c0: u32,
  reserved0x3c4: u32,
  reserved0x3c8: u32,
  reserved0x3cc: u32,
  reserved0x3d0: u32,
  reserved0x3d4: u32,
  reserved0x3d8: u32,
  reserved0x3dc: u32,
  reserved0x3e0: u32,
  reserved0x3e4: u32,
  reserved0x3e8: u32,
  reserved0x3ec: u32,
  reserved0x3f0: u32,
  reserved0x3f4: u32,
  reserved0x3f8: u32,
  reserved0x3fc: u32,
  reserved0x400: u32,
  reserved0x404: u32,
  reserved0x408: u32,
  reserved0x40c: u32,
  reserved0x410: u32,
  reserved0x414: u32,
  reserved0x418: u32,
  reserved0x41c: u32,
  reserved0x420: u32,
  reserved0x424: u32,
  reserved0x428: u32,
  reserved0x42c: u32,
  reserved0x430: u32,
  reserved0x434: u32,
  reserved0x438: u32,
  reserved0x43c: u32,
  reserved0x440: u32,
  reserved0x444: u32,
  reserved0x448: u32,
  reserved0x44c: u32,
  reserved0x450: u32,
  reserved0x454: u32,
  reserved0x458: u32,
  reserved0x45c: u32,
  reserved0x460: u32,
  reserved0x464: u32,
  reserved0x468: u32,
  reserved0x46c: u32,
  reserved0x470: u32,
  reserved0x474: u32,
  reserved0x478: u32,
  reserved0x47c: u32,
  reserved0x480: u32,
  reserved0x484: u32,
  reserved0x488: u32,
  reserved0x48c: u32,
  reserved0x490: u32,
  reserved0x494: u32,
  reserved0x498: u32,
  reserved0x49c: u32,
  reserved0x4a0: u32,
  reserved0x4a4: u32,
  reserved0x4a8: u32,
  reserved0x4ac: u32,
  reserved0x4b0: u32,
  reserved0x4b4: u32,
  reserved0x4b8: u32,
  reserved0x4bc: u32,
  reserved0x4c0: u32,
  reserved0x4c4: u32,
  reserved0x4c8: u32,
  reserved0x4cc: u32,
  reserved0x4d0: u32,
  reserved0x4d4: u32,
  reserved0x4d8: u32,
  reserved0x4dc: u32,
  reserved0x4e0: u32,
  reserved0x4e4: u32,
  reserved0x4e8: u32,
  reserved0x4ec: u32,
  reserved0x4f0: u32,
  reserved0x4f4: u32,
  reserved0x4f8: u32,
  reserved0x4fc: u32,
  reserved0x500: u32,
  reserved0x504: u32,
  reserved0x508: u32,
  reserved0x50c: u32,
  reserved0x510: u32,
  reserved0x514: u32,
  reserved0x518: u32,
  reserved0x51c: u32,
  reserved0x520: u32,
  reserved0x524: u32,
  reserved0x528: u32,
  reserved0x52c: u32,
  reserved0x530: u32,
  reserved0x534: u32,
  reserved0x538: u32,
  reserved0x53c: u32,
  reserved0x540: u32,
  reserved0x544: u32,
  reserved0x548: u32,
  reserved0x54c: u32,
  reserved0x550: u32,
  reserved0x554: u32,
  reserved0x558: u32,
  reserved0x55c: u32,
  reserved0x560: u32,
  reserved0x564: u32,
  reserved0x568: u32,
  reserved0x56c: u32,
  reserved0x570: u32,
  reserved0x574: u32,
  reserved0x578: u32,
  reserved0x57c: u32,
  reserved0x580: u32,
  reserved0x584: u32,
  reserved0x588: u32,
  reserved0x58c: u32,
  reserved0x590: u32,
  reserved0x594: u32,
  reserved0x598: u32,
  reserved0x59c: u32,
  reserved0x5a0: u32,
  reserved0x5a4: u32,
  reserved0x5a8: u32,
  reserved0x5ac: u32,
  reserved0x5b0: u32,
  reserved0x5b4: u32,
  reserved0x5b8: u32,
  reserved0x5bc: u32,
  reserved0x5c0: u32,
  reserved0x5c4: u32,
  reserved0x5c8: u32,
  reserved0x5cc: u32,
  reserved0x5d0: u32,
  reserved0x5d4: u32,
  reserved0x5d8: u32,
  reserved0x5dc: u32,
  reserved0x5e0: u32,
  reserved0x5e4: u32,
  reserved0x5e8: u32,
  reserved0x5ec: u32,
  reserved0x5f0: u32,
  reserved0x5f4: u32,
  reserved0x5f8: u32,
  reserved0x5fc: u32,
  reserved0x600: u32,
  reserved0x604: u32,
  reserved0x608: u32,
  reserved0x60c: u32,
  reserved0x610: u32,
  reserved0x614: u32,
  reserved0x618: u32,
  reserved0x61c: u32,
  reserved0x620: u32,
  reserved0x624: u32,
  reserved0x628: u32,
  reserved0x62c: u32,
  reserved0x630: u32,
  reserved0x634: u32,
  reserved0x638: u32,
  reserved0x63c: u32,
  reserved0x640: u32,
  reserved0x644: u32,
  reserved0x648: u32,
  reserved0x64c: u32,
  reserved0x650: u32,
  reserved0x654: u32,
  reserved0x658: u32,
  reserved0x65c: u32,
  reserved0x660: u32,
  reserved0x664: u32,
  reserved0x668: u32,
  reserved0x66c: u32,
  reserved0x670: u32,
  reserved0x674: u32,
  reserved0x678: u32,
  reserved0x67c: u32,
  reserved0x680: u32,
  reserved0x684: u32,
  reserved0x688: u32,
  reserved0x68c: u32,
  reserved0x690: u32,
  reserved0x694: u32,
  reserved0x698: u32,
  reserved0x69c: u32,
  reserved0x6a0: u32,
  reserved0x6a4: u32,
  reserved0x6a8: u32,
  reserved0x6ac: u32,
  reserved0x6b0: u32,
  reserved0x6b4: u32,
  reserved0x6b8: u32,
  reserved0x6bc: u32,
  reserved0x6c0: u32,
  reserved0x6c4: u32,
  reserved0x6c8: u32,
  reserved0x6cc: u32,
  reserved0x6d0: u32,
  reserved0x6d4: u32,
  reserved0x6d8: u32,
  reserved0x6dc: u32,
  reserved0x6e0: u32,
  reserved0x6e4: u32,
  reserved0x6e8: u32,
  reserved0x6ec: u32,
  reserved0x6f0: u32,
  reserved0x6f4: u32,
  reserved0x6f8: u32,
  reserved0x6fc: u32,
  reserved0x700: u32,
  reserved0x704: u32,
  reserved0x708: u32,
  reserved0x70c: u32,
  reserved0x710: u32,
  reserved0x714: u32,
  reserved0x718: u32,
  reserved0x71c: u32,
  reserved0x720: u32,
  reserved0x724: u32,
  reserved0x728: u32,
  reserved0x72c: u32,
  reserved0x730: u32,
  reserved0x734: u32,
  reserved0x738: u32,
  reserved0x73c: u32,
  reserved0x740: u32,
  reserved0x744: u32,
  reserved0x748: u32,
  reserved0x74c: u32,
  reserved0x750: u32,
  reserved0x754: u32,
  reserved0x758: u32,
  reserved0x75c: u32,
  reserved0x760: u32,
  reserved0x764: u32,
  reserved0x768: u32,
  reserved0x76c: u32,
  reserved0x770: u32,
  reserved0x774: u32,
  reserved0x778: u32,
  reserved0x77c: u32,
  reserved0x780: u32,
  reserved0x784: u32,
  reserved0x788: u32,
  reserved0x78c: u32,
  reserved0x790: u32,
  reserved0x794: u32,
  reserved0x798: u32,
  reserved0x79c: u32,
  reserved0x7a0: u32,
  reserved0x7a4: u32,
  reserved0x7a8: u32,
  reserved0x7ac: u32,
  reserved0x7b0: u32,
  reserved0x7b4: u32,
  reserved0x7b8: u32,
  reserved0x7bc: u32,
  reserved0x7c0: u32,
  reserved0x7c4: u32,
  reserved0x7c8: u32,
  reserved0x7cc: u32,
  reserved0x7d0: u32,
  reserved0x7d4: u32,
  reserved0x7d8: u32,
  reserved0x7dc: u32,
  reserved0x7e0: u32,
  reserved0x7e4: u32,
  reserved0x7e8: u32,
  reserved0x7ec: u32,
  reserved0x7f0: u32,
  reserved0x7f4: u32,
  reserved0x7f8: u32,
  reserved0x7fc: u32,
  reserved0x800: u32,
  reserved0x804: u32,
  reserved0x808: u32,
  reserved0x80c: u32,
  reserved0x810: u32,
  reserved0x814: u32,
  reserved0x818: u32,
  reserved0x81c: u32,
  reserved0x820: u32,
  reserved0x824: u32,
  reserved0x828: u32,
  reserved0x82c: u32,
  reserved0x830: u32,
  reserved0x834: u32,
  reserved0x838: u32,
  reserved0x83c: u32,
  /// [2112]: Status register - Load Register command
  pub cau_ldr_casr: WO<u32>,
  /// [2116]: Accumulator register - Load Register command
  pub cau_ldr_caa: WO<u32>,
  /// [2120]: General Purpose Register 0 - Load Register command
  pub cau_ldr_ca0: WO<u32>,
  /// [2124]: General Purpose Register 1 - Load Register command
  pub cau_ldr_ca1: WO<u32>,
  /// [2128]: General Purpose Register 2 - Load Register command
  pub cau_ldr_ca2: WO<u32>,
  /// [2132]: General Purpose Register 3 - Load Register command
  pub cau_ldr_ca3: WO<u32>,
  /// [2136]: General Purpose Register 4 - Load Register command
  pub cau_ldr_ca4: WO<u32>,
  /// [2140]: General Purpose Register 5 - Load Register command
  pub cau_ldr_ca5: WO<u32>,
  /// [2144]: General Purpose Register 6 - Load Register command
  pub cau_ldr_ca6: WO<u32>,
  /// [2148]: General Purpose Register 7 - Load Register command
  pub cau_ldr_ca7: WO<u32>,
  /// [2152]: General Purpose Register 8 - Load Register command
  pub cau_ldr_ca8: WO<u32>,
  reserved0x86c: u32,
  reserved0x870: u32,
  reserved0x874: u32,
  reserved0x878: u32,
  reserved0x87c: u32,
  /// [2176]: Status register - Store Register command
  pub cau_str_casr: RO<u32>,
  /// [2180]: Accumulator register - Store Register command
  pub cau_str_caa: RO<u32>,
  /// [2184]: General Purpose Register 0 - Store Register command
  pub cau_str_ca0: RO<u32>,
  /// [2188]: General Purpose Register 1 - Store Register command
  pub cau_str_ca1: RO<u32>,
  /// [2192]: General Purpose Register 2 - Store Register command
  pub cau_str_ca2: RO<u32>,
  /// [2196]: General Purpose Register 3 - Store Register command
  pub cau_str_ca3: RO<u32>,
  /// [2200]: General Purpose Register 4 - Store Register command
  pub cau_str_ca4: RO<u32>,
  /// [2204]: General Purpose Register 5 - Store Register command
  pub cau_str_ca5: RO<u32>,
  /// [2208]: General Purpose Register 6 - Store Register command
  pub cau_str_ca6: RO<u32>,
  /// [2212]: General Purpose Register 7 - Store Register command
  pub cau_str_ca7: RO<u32>,
  /// [2216]: General Purpose Register 8 - Store Register command
  pub cau_str_ca8: RO<u32>,
  reserved0x8ac: u32,
  reserved0x8b0: u32,
  reserved0x8b4: u32,
  reserved0x8b8: u32,
  reserved0x8bc: u32,
  /// [2240]: Status register - Add Register command
  pub cau_adr_casr: WO<u32>,
  /// [2244]: Accumulator register - Add to register command
  pub cau_adr_caa: WO<u32>,
  /// [2248]: General Purpose Register 0 - Add to register command
  pub cau_adr_ca0: WO<u32>,
  /// [2252]: General Purpose Register 1 - Add to register command
  pub cau_adr_ca1: WO<u32>,
  /// [2256]: General Purpose Register 2 - Add to register command
  pub cau_adr_ca2: WO<u32>,
  /// [2260]: General Purpose Register 3 - Add to register command
  pub cau_adr_ca3: WO<u32>,
  /// [2264]: General Purpose Register 4 - Add to register command
  pub cau_adr_ca4: WO<u32>,
  /// [2268]: General Purpose Register 5 - Add to register command
  pub cau_adr_ca5: WO<u32>,
  /// [2272]: General Purpose Register 6 - Add to register command
  pub cau_adr_ca6: WO<u32>,
  /// [2276]: General Purpose Register 7 - Add to register command
  pub cau_adr_ca7: WO<u32>,
  /// [2280]: General Purpose Register 8 - Add to register command
  pub cau_adr_ca8: WO<u32>,
  reserved0x8ec: u32,
  reserved0x8f0: u32,
  reserved0x8f4: u32,
  reserved0x8f8: u32,
  reserved0x8fc: u32,
  /// [2304]: Status register - Reverse and Add to Register command
  pub cau_radr_casr: WO<u32>,
  /// [2308]: Accumulator register - Reverse and Add to Register command
  pub cau_radr_caa: WO<u32>,
  /// [2312]: General Purpose Register 0 - Reverse and Add to Register command
  pub cau_radr_ca0: WO<u32>,
  /// [2316]: General Purpose Register 1 - Reverse and Add to Register command
  pub cau_radr_ca1: WO<u32>,
  /// [2320]: General Purpose Register 2 - Reverse and Add to Register command
  pub cau_radr_ca2: WO<u32>,
  /// [2324]: General Purpose Register 3 - Reverse and Add to Register command
  pub cau_radr_ca3: WO<u32>,
  /// [2328]: General Purpose Register 4 - Reverse and Add to Register command
  pub cau_radr_ca4: WO<u32>,
  /// [2332]: General Purpose Register 5 - Reverse and Add to Register command
  pub cau_radr_ca5: WO<u32>,
  /// [2336]: General Purpose Register 6 - Reverse and Add to Register command
  pub cau_radr_ca6: WO<u32>,
  /// [2340]: General Purpose Register 7 - Reverse and Add to Register command
  pub cau_radr_ca7: WO<u32>,
  /// [2344]: General Purpose Register 8 - Reverse and Add to Register command
  pub cau_radr_ca8: WO<u32>,
  reserved0x92c: u32,
  reserved0x930: u32,
  reserved0x934: u32,
  reserved0x938: u32,
  reserved0x93c: u32,
  reserved0x940: u32,
  reserved0x944: u32,
  reserved0x948: u32,
  reserved0x94c: u32,
  reserved0x950: u32,
  reserved0x954: u32,
  reserved0x958: u32,
  reserved0x95c: u32,
  reserved0x960: u32,
  reserved0x964: u32,
  reserved0x968: u32,
  reserved0x96c: u32,
  reserved0x970: u32,
  reserved0x974: u32,
  reserved0x978: u32,
  reserved0x97c: u32,
  /// [2432]: Status register - Exclusive Or command
  pub cau_xor_casr: WO<u32>,
  /// [2436]: Accumulator register - Exclusive Or command
  pub cau_xor_caa: WO<u32>,
  /// [2440]: General Purpose Register 0 - Exclusive Or command
  pub cau_xor_ca0: WO<u32>,
  /// [2444]: General Purpose Register 1 - Exclusive Or command
  pub cau_xor_ca1: WO<u32>,
  /// [2448]: General Purpose Register 2 - Exclusive Or command
  pub cau_xor_ca2: WO<u32>,
  /// [2452]: General Purpose Register 3 - Exclusive Or command
  pub cau_xor_ca3: WO<u32>,
  /// [2456]: General Purpose Register 4 - Exclusive Or command
  pub cau_xor_ca4: WO<u32>,
  /// [2460]: General Purpose Register 5 - Exclusive Or command
  pub cau_xor_ca5: WO<u32>,
  /// [2464]: General Purpose Register 6 - Exclusive Or command
  pub cau_xor_ca6: WO<u32>,
  /// [2468]: General Purpose Register 7 - Exclusive Or command
  pub cau_xor_ca7: WO<u32>,
  /// [2472]: General Purpose Register 8 - Exclusive Or command
  pub cau_xor_ca8: WO<u32>,
  reserved0x9ac: u32,
  reserved0x9b0: u32,
  reserved0x9b4: u32,
  reserved0x9b8: u32,
  reserved0x9bc: u32,
  /// [2496]: Status register - Rotate Left command
  pub cau_rotl_casr: WO<u32>,
  /// [2500]: Accumulator register - Rotate Left command
  pub cau_rotl_caa: WO<u32>,
  /// [2504]: General Purpose Register 0 - Rotate Left command
  pub cau_rotl_ca0: WO<u32>,
  /// [2508]: General Purpose Register 1 - Rotate Left command
  pub cau_rotl_ca1: WO<u32>,
  /// [2512]: General Purpose Register 2 - Rotate Left command
  pub cau_rotl_ca2: WO<u32>,
  /// [2516]: General Purpose Register 3 - Rotate Left command
  pub cau_rotl_ca3: WO<u32>,
  /// [2520]: General Purpose Register 4 - Rotate Left command
  pub cau_rotl_ca4: WO<u32>,
  /// [2524]: General Purpose Register 5 - Rotate Left command
  pub cau_rotl_ca5: WO<u32>,
  /// [2528]: General Purpose Register 6 - Rotate Left command
  pub cau_rotl_ca6: WO<u32>,
  /// [2532]: General Purpose Register 7 - Rotate Left command
  pub cau_rotl_ca7: WO<u32>,
  /// [2536]: General Purpose Register 8 - Rotate Left command
  pub cau_rotl_ca8: WO<u32>,
  reserved0x9ec: u32,
  reserved0x9f0: u32,
  reserved0x9f4: u32,
  reserved0x9f8: u32,
  reserved0x9fc: u32,
  reserved0xa00: u32,
  reserved0xa04: u32,
  reserved0xa08: u32,
  reserved0xa0c: u32,
  reserved0xa10: u32,
  reserved0xa14: u32,
  reserved0xa18: u32,
  reserved0xa1c: u32,
  reserved0xa20: u32,
  reserved0xa24: u32,
  reserved0xa28: u32,
  reserved0xa2c: u32,
  reserved0xa30: u32,
  reserved0xa34: u32,
  reserved0xa38: u32,
  reserved0xa3c: u32,
  reserved0xa40: u32,
  reserved0xa44: u32,
  reserved0xa48: u32,
  reserved0xa4c: u32,
  reserved0xa50: u32,
  reserved0xa54: u32,
  reserved0xa58: u32,
  reserved0xa5c: u32,
  reserved0xa60: u32,
  reserved0xa64: u32,
  reserved0xa68: u32,
  reserved0xa6c: u32,
  reserved0xa70: u32,
  reserved0xa74: u32,
  reserved0xa78: u32,
  reserved0xa7c: u32,
  reserved0xa80: u32,
  reserved0xa84: u32,
  reserved0xa88: u32,
  reserved0xa8c: u32,
  reserved0xa90: u32,
  reserved0xa94: u32,
  reserved0xa98: u32,
  reserved0xa9c: u32,
  reserved0xaa0: u32,
  reserved0xaa4: u32,
  reserved0xaa8: u32,
  reserved0xaac: u32,
  reserved0xab0: u32,
  reserved0xab4: u32,
  reserved0xab8: u32,
  reserved0xabc: u32,
  reserved0xac0: u32,
  reserved0xac4: u32,
  reserved0xac8: u32,
  reserved0xacc: u32,
  reserved0xad0: u32,
  reserved0xad4: u32,
  reserved0xad8: u32,
  reserved0xadc: u32,
  reserved0xae0: u32,
  reserved0xae4: u32,
  reserved0xae8: u32,
  reserved0xaec: u32,
  reserved0xaf0: u32,
  reserved0xaf4: u32,
  reserved0xaf8: u32,
  reserved0xafc: u32,
  /// [2816]: Status register - AES Column Operation command
  pub cau_aesc_casr: WO<u32>,
  /// [2820]: Accumulator register - AES Column Operation command
  pub cau_aesc_caa: WO<u32>,
  /// [2824]: General Purpose Register 0 - AES Column Operation command
  pub cau_aesc_ca0: WO<u32>,
  /// [2828]: General Purpose Register 1 - AES Column Operation command
  pub cau_aesc_ca1: WO<u32>,
  /// [2832]: General Purpose Register 2 - AES Column Operation command
  pub cau_aesc_ca2: WO<u32>,
  /// [2836]: General Purpose Register 3 - AES Column Operation command
  pub cau_aesc_ca3: WO<u32>,
  /// [2840]: General Purpose Register 4 - AES Column Operation command
  pub cau_aesc_ca4: WO<u32>,
  /// [2844]: General Purpose Register 5 - AES Column Operation command
  pub cau_aesc_ca5: WO<u32>,
  /// [2848]: General Purpose Register 6 - AES Column Operation command
  pub cau_aesc_ca6: WO<u32>,
  /// [2852]: General Purpose Register 7 - AES Column Operation command
  pub cau_aesc_ca7: WO<u32>,
  /// [2856]: General Purpose Register 8 - AES Column Operation command
  pub cau_aesc_ca8: WO<u32>,
  reserved0xb2c: u32,
  reserved0xb30: u32,
  reserved0xb34: u32,
  reserved0xb38: u32,
  reserved0xb3c: u32,
  /// [2880]: Status register - AES Inverse Column Operation command
  pub cau_aesic_casr: WO<u32>,
  /// [2884]: Accumulator register - AES Inverse Column Operation command
  pub cau_aesic_caa: WO<u32>,
  /// [2888]: General Purpose Register 0 - AES Inverse Column Operation command
  pub cau_aesic_ca0: WO<u32>,
  /// [2892]: General Purpose Register 1 - AES Inverse Column Operation command
  pub cau_aesic_ca1: WO<u32>,
  /// [2896]: General Purpose Register 2 - AES Inverse Column Operation command
  pub cau_aesic_ca2: WO<u32>,
  /// [2900]: General Purpose Register 3 - AES Inverse Column Operation command
  pub cau_aesic_ca3: WO<u32>,
  /// [2904]: General Purpose Register 4 - AES Inverse Column Operation command
  pub cau_aesic_ca4: WO<u32>,
  /// [2908]: General Purpose Register 5 - AES Inverse Column Operation command
  pub cau_aesic_ca5: WO<u32>,
  /// [2912]: General Purpose Register 6 - AES Inverse Column Operation command
  pub cau_aesic_ca6: WO<u32>,
  /// [2916]: General Purpose Register 7 - AES Inverse Column Operation command
  pub cau_aesic_ca7: WO<u32>,
  /// [2920]: General Purpose Register 8 - AES Inverse Column Operation command
  pub cau_aesic_ca8: WO<u32>,
}

pub fn cau() -> *mut CAU {
  3758624768 as *mut CAU
}
